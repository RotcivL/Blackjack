[{"/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/index.js":"1","/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/App.js":"2","/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/reportWebVitals.js":"3","/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/data.js":"4","/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/components/Players.jsx":"5","/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/components/Dealer.jsx":"6","/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/components/StartDialog.jsx":"7","/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/components/Cards.jsx":"8","/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/components/PlayerStatus.jsx":"9","/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/Web3Client.js":"10","/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/components/GameOverDialog.jsx":"11"},{"size":497,"mtime":1652702286687,"results":"12","hashOfConfig":"13"},{"size":13326,"mtime":1653547491010,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1652281823701,"results":"15","hashOfConfig":"13"},{"size":485,"mtime":1652702286687,"results":"16","hashOfConfig":"13"},{"size":2257,"mtime":1653525779170,"results":"17","hashOfConfig":"13"},{"size":761,"mtime":1653526336433,"results":"18","hashOfConfig":"13"},{"size":3580,"mtime":1653524332853,"results":"19","hashOfConfig":"13"},{"size":1598,"mtime":1653541017102,"results":"20","hashOfConfig":"13"},{"size":2234,"mtime":1653546897031,"results":"21","hashOfConfig":"13"},{"size":5899,"mtime":1653544043403,"results":"22","hashOfConfig":"13"},{"size":2213,"mtime":1653547017892,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"7lln7j",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"26"},"/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/index.js",[],["53","54"],"/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/App.js",["55","56","57","58","59","60","61"],"\nimport { React, useState, useEffect } from 'react';\nimport Dealer from './components/Dealer';\nimport Player from './components/Players';\nimport styles from \"../src/style/table.module.css\"\nimport backgroundImage from \"./table_background.jpeg\"\nimport StartDialog from './components/StartDialog';\nimport Button from '@mui/material/Button';\nimport {initializeContract, joinGame, getStatus, startGame,getHandCard,playerHitCard, getGameStart, getPlayerWin, playerStand,startGameEventListener,joinGameEventListener,playerHitEventListener, playerStandEventListener,withdraw} from \"./Web3Client\";\nimport GameOverDialog from './components/GameOverDialog';\nimport Typography from '@mui/material/Typography';\n\n\n\n\n//import ReactDOM from 'react-dom';\n\n\n\nconst App=()=> {\n\n  const PROVIDER_URL='http://localhost:3000'\n\n  const connectWalletHandler= async()=>{\n    //const web3= new Web3(PROVIDER_URL)\n    let provider=window.ethereum;\n    if(typeof provider!==\"undefined\"){\n      try{\n        const accounts= await provider.request({method:\"eth_requestAccounts\"})\n        setAccount(accounts[0])\n      }catch(err){\n        console.log(\"err:\",err)\n      }\n       \n\n    }\n    else{\n      alert(\"You need to install MetaMask.\")\n    }\n\n  }\n    \n\n  \n\n\n\n  \n\n   const cardInterpreter=(cardIndexList)=>{\n     const temp_cardList=[]\n     const values = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"];\n     const types = [\"C\", \"D\", \"H\", \"S\"];\n     for (let i=0;i<cardIndexList.length;i++){\n       const index=cardIndexList[i]\n       const value_index=index%52%13\n       const type_index=Math.floor(index%52/13)\n       const card={value:values[value_index],type:types[type_index]}\n       temp_cardList.push(card)\n     }\n     return temp_cardList\n\n   }\n \n   \n   \n  const dealingInterval=2000;\n\n  const nullPlayer=\"0x0000000000000000000000000000000000000000\";\n\n  const [account,setAccount]=useState(null)\n\n  const [dealer,setDealer]=useState(null)\n\n  //const [metamaskAccount,setmetamaskAccount]=useState(null)\n\n  const [dealerBal,setDealerBal]=useState(null)\n\n  const[player,setPlayer]=useState(null)\n\n  const[playerBal,setPlayerBal]=useState(null)\n\n  const[contractBal,setContractBal]=useState(null)\n\n  const[gameStart,setGameStart]=useState(null)\n\n  const[playerWin,setPlayerWin]=useState(null)\n\n  \n\n\n\n  \n  const initialCardCount=2\n  \n  const [isDealerStart,setisDealerStart]=useState(false)\n\n  const[playerList,setPlayerList]=useState([])\n  \n  //const[deck,]=useState(deckBuilder())\n\n  const[dealerCardList, setDealerCardList]=useState([])\n\n  const[turnIndex,setTurnIndex]=useState('')\n\n  const[isDealerTurn,setIsDealerTurn]=useState(false)\n\n  const [isPlayerAccount,setIsPlayerAccount]=useState(null)\n\n  const [isDealerAccount,setIsDealerAccount]=useState(null)\n\n  const[isPlayerJoin,setIsPlayerJoin]=useState(null)\n\n  const [isDealerReveal,setIsDealerReveal]=useState(false)\n\n\n  const [time, setTime] = useState(Date.now());\n\n   useEffect(() => {\n     const interval = setInterval(() => setTime(Date.now()), 1000);\n     return () => {\n       clearInterval(interval);\n      \n     };\n    \n   }, []);\n\n\n\n  const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms))\n  /*\n  Fetch players' data and then initiallize player list.\n  When isRoundStarted truns true, each player gets their initial cards by triggering dealing method\n  */\n  useEffect(() => {\n    async function listenMMAccount() {\n      window.ethereum.on(\"accountsChanged\", async function() {\n        // Time to reload your interface with accounts[0]!\n        let provider=window.ethereum;\n        const accounts= await provider.request({method:\"eth_requestAccounts\"})\n        setAccount(accounts[0])\n       \n        \n        \n        // accounts = await web3.eth.getAccounts();\n      });\n    }\n    listenMMAccount();\n  }, []);\n  \n  \n\n\nuseEffect(()=>{\n  connectWalletHandler()\n  setStatusHandler()\n  \n},[isDealerStart,player])\n\nuseEffect(()=>{\n  const currentUser= async()=>{\n    if(player!==null&&dealer!==null&&account!==null){\n   \n      setIsDealerAccount(dealer.toLowerCase()===account.toLowerCase());\n      setIsPlayerAccount(player.toLowerCase()===account.toLowerCase());\n    }\n\n  }\n  currentUser()\n},[account,player,dealer])\n\n\n\n\n\nconst joinGameHandler= async ()=>{\n  const result=await joinGame()\n  if(result){\n    await setStatusHandler()\n  \n  }\n\n}\n\nconst isDealerRevealHandler=()=>{\n  setIsDealerReveal(true)\n}\n\nconst startGameHandler=async()=>{\n  const result=await startGame()\n  if(result){\n    await setStatusHandler()\n    await setHandHandler()\n    //setisDealerStart(true)\n   \n    await wait(dealingInterval*4)\n    const gameStart_=await getGameStart()\n    const playerWin_=await getPlayerWin()\n    setGameStart(gameStart_)\n    setPlayerWin(playerWin_)\n    \n  }\n}\n\nconst setStatusHandler=async()=>{\n  const statusArr=await getStatus()\n  //setmetamaskAccount(statusArr.metamask_account)\n  setDealer(statusArr[0].dealer)\n  setDealerBal(statusArr[0].dealerBal)\n  setPlayer(statusArr[0].player)\n  setPlayerBal(statusArr[0].playerBal)\n  setContractBal(statusArr[0].contractBal)\n  \n  //setGameStart(statusArr[0].gameStart)\n  \n\n}\n\nconst setHandHandler=async()=>{\n   const handCard=await getHandCard()\n   const player_add=player\n  \n   const temp_playerList=playerList\n   const temp_dealerCardList=dealerCardList\n   const dealerHand_index=handCard.dealerHand\n   const playerHand_index=handCard.playerHand\n   if(dealerHand_index==null||playerHand_index==null){\n     return\n   }\n   const dealerHand=cardInterpreter(dealerHand_index)\n   const playerHand=cardInterpreter(playerHand_index)\n   const player_json={address:player_add,cardList:[],name:\"goodguy\",isMe:true,bet:10}\n   temp_playerList.push(player_json)\n   for (let i=0;i<2;i++){\n    temp_playerList[0].cardList.push(playerHand[i])\n    setPlayerList([...temp_playerList])\n    await wait(dealingInterval)\n    temp_dealerCardList.push(dealerHand[i])\n    setDealerCardList([...temp_dealerCardList])\n    await wait(dealingInterval)\n   }\n\n   //setisDealerStart(false)\n   setTurnIndex(0)\n   //console.log(dealerHand,dealerHand_index)\n\n   //console.log(dealerCardList,playerList)\n   \n}\n\n \n\n     \n    \n  \n\n\n\n/*\n  Start dealing cards.\n  */\n\n  const setisDealerStartHandler=()=>{\n    setisDealerStart(true)\n  }\n\n  const nextPlayerHandler=()=>{\n    if (turnIndex<playerList.length-1){\n    const nextIndex=turnIndex+1\n    setTurnIndex(nextIndex)\n    }\n    else{\n      setIsDealerTurn(true)\n    }\n  }\n\n  const hitHandler= async (index)=>{\n    \n    const result=await playerHitCard()\n    const temp_playerList=playerList\n    const temp_cardList=temp_playerList[index].cardList\n    const handCardNum=temp_cardList.length\n    const handCard=await getHandCard()\n    const playerHand_index=handCard.playerHand\n    const playerHand=cardInterpreter(playerHand_index)\n    temp_playerList[index].cardList.push(playerHand[handCardNum])\n   \n    setPlayerList([...temp_playerList])\n    const gameStart_=await getGameStart()\n    const playerWin_=await getPlayerWin()\n    setGameStart(gameStart_)\n    setPlayerWin(playerWin_)\n\n  }\n\n  const playerStandHandler= async ()=>{\n    const result=await playerStand()\n    //console.log(\"player stand: \",result)\n    // const temp_dealerCardList=dealerCardList\n    // const oldHandCardNum=temp_dealerCardList.length\n    // const handCard=await getHandCard()\n    //const dealerHandCard_index=handCard.dealerHand\n    //const dealerHandCard=cardInterpreter(dealerHandCard_index)\n    console.log(\"dealerhand: \",dealerCardList)\n    // const addedCardNum=dealerHandCard.length-oldHandCardNum\n    // if(addedCardNum>0){\n    //   for (let i=0;i<addedCardNum;i++){\n    //     temp_dealerCardList.push(dealerHandCard[i+2])\n    //     console.log(temp_dealerCardList)\n    //     setDealerCardList([...temp_dealerCardList])\n    //     await wait(dealingInterval)\n\n    //   }\n    // }\n    // const gameStart_=await getGameStart()\n    // const playerWin_=await getPlayerWin()\n\n    // setGameStart(gameStart_)\n    // setPlayerWin(playerWin_)\n\n    \n   \n  }\n\n  const withdrawHandler= async ()=>{\n    const result=await withdraw()\n    if(result){\n      console.log(\"successfully withdraw \")\n    }\n  }\n \n\n  const startGameListener= async ()=>{\n    const results=await startGameEventListener()\n    if(results){\n      const _gameStart=results.returnValues._gameStart\n      const _playerWin=results.returnValues._playerWin\n      const _dealerBalance=results.returnValues._dealerBalance\n      const _playerBalance=results.returnValues._playerBalance\n      setisDealerStart(_gameStart)\n      await wait(dealingInterval*4)\n      setPlayerWin(_playerWin)\n      setDealerBal(_dealerBalance)\n      setPlayerBal(_playerBalance)\n    \n      console.log(\"test gamestart listener\",results.returnValues._gameStart)\n    }\n    // else{\n    //   console.log(\"invalid res\")\n    // }\n    \n  }\n\n  startGameListener();\n\n  const joinGameListener= async ()=>{\n    const results=await joinGameEventListener()\n    if(results){\n      const _player=results.returnValues._player\n      setPlayer(_player)\n      setIsPlayerJoin(true)\n      //console.log(\"test joingame listener\",results.returnValues._player)\n    }\n    // else{\n    //   console.log(\"invalid res\")\n    // }\n    \n  }\n\n  joinGameListener();\n  \n  const playerHitCardListener= async ()=>{\n    const results=await playerHitEventListener()\n    if(results){\n      const temp_playerList=playerList\n      const playerHand_index=results.returnValues._playerHand\n      const _playerWin=results.returnValues._playerWin\n      const _dealerBalance=results.returnValues._dealerBalance\n      const _playerBalance=results.returnValues._playerBalance\n      const playerHand=cardInterpreter(playerHand_index)\n      //const temp_cardList=temp_playerList[0].cardList\n      //const handCardNum=temp_cardList.length-1\n      temp_playerList[0].cardList=playerHand\n      \n      setPlayerList([...temp_playerList])\n      //setIsDealerReveal(true)\n      setPlayerWin(_playerWin)\n      setDealerBal(_dealerBalance)\n      setPlayerBal(_playerBalance)\n\n      \n      //console.log(\"test handcard listener\",results.returnValues._playerHand,playerHand,temp_playerList)\n    }\n    // else{\n    //   console.log(\"invalid res\")\n    // }\n    \n  }\n  \n  playerHitCardListener();\n\n  const playerDealerCardListener= async ()=>{\n    const results=await playerStandEventListener()\n    if(results){\n      //const temp_dealerList=dealerCardList\n      const dealerHand_index=results.returnValues._dealerHand\n      const _playerWin=results.returnValues._playerWin\n      const _dealerBalance=results.returnValues._dealerBalance\n      const _playerBalance=results.returnValues._playerBalance\n      const dealerHand=cardInterpreter(dealerHand_index)\n      //const temp_cardList=temp_playerList[0].cardList\n      //const handCardNum=temp_cardList.length-1\n      //temp_dealerList=dealerHand\n      \n      setDealerCardList([...dealerHand])\n      setIsDealerReveal(true)\n      setPlayerWin(_playerWin)\n      setDealerBal(_dealerBalance)\n      setPlayerBal(_playerBalance)\n      //console.log(\"test standcard listener\",temp_dealerList,dealerHand)\n    }\n    // else{\n    //   console.log(\"invalid res\")\n    // }\n    \n  }\n  \n  playerDealerCardListener();\n\n\n  \n\n  return (\n    <>\n    <section\n    style={\n      {\n        position:\"absolute\",\n        marginLeft:\"1800px\",\n        paddingTop:\"30px\",\n        paddingRight:\"30px\"\n\n      }\n    }\n    >\n     <StartDialog\n    setisDealerStartHandler={setisDealerStartHandler}\n    initializeContract={initializeContract}\n    isPlayerJoin={isPlayerJoin}\n    isDealerStart={isDealerStart}\n    dealer={dealer}\n    player={player}\n    account={account}\n    joinGameHandler={joinGameHandler}\n    setStatusHandler={setStatusHandler}\n    startGameHandler={startGameHandler}\n    setHandHandler={setHandHandler}\n    startGameEventListener={startGameEventListener}\n    joinGameEventListener={joinGameEventListener}\n    \n    \n\n    />\n    <GameOverDialog\n    gameStart={gameStart}\n    withdrawHandler={withdrawHandler}\n    playerBal={playerBal}\n    playerWin={playerWin}\n    isPlayerAccount={isPlayerAccount}\n    isDealerAccount={isDealerAccount}\n    />\n  \n   {(dealerBal&&isPlayerAccount)&&(<Typography>{`Current balance: ${playerBal}`}</Typography>)}\n   {(dealerBal&&!isPlayerAccount&&isPlayerJoin!==null)&&(<Typography>{`Current balance: ${dealerBal}`}</Typography>)}\n   {<Button onClick={()=>\n          {\n            withdrawHandler()\n\n\n            }}\n             >\n            withdraw\n          </Button>}\n   \n  \n   </section>\n    <div \n    className={styles.table}\n    style={{backgroundImage: `url(${backgroundImage})`}}\n    >\n   \n   \n    <Dealer\n    cardList={dealerCardList}\n    isDealerTurn={isDealerTurn}\n    isDealerAccount={isDealerAccount}\n    isPlayerAccount={isPlayerAccount}\n    isDealerReveal={isDealerReveal}\n    \n    />\n    \n    {playerList.map((player, index)=><Player\n      key={index}\n      playerIndex={index}\n      name={player.name}\n      isDealerAccount={isDealerAccount}\n      isPlayerAccount={isPlayerAccount}\n      bet={player.bet}\n      cardList={player.cardList}\n      whosTurn={turnIndex}\n      nextPlayerHandler={nextPlayerHandler}\n      hitHandler={hitHandler}\n      playerStandHandler={playerStandHandler}\n      isDealerRevealHandler={isDealerRevealHandler}\n      isDealerReveal={isDealerReveal}\n      />\n    )}\n    \n    </div>\n    </>\n  )\n}\n\nexport default App;\n","/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/reportWebVitals.js",[],"/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/data.js",["62"],"\nconst playerList=[]\n\nconst player1={\n    bet:10,\n    name:\"aaa\",\n    isMe:true,\n    cardList:[]\n  }\n  const player2={\n    bet:12,\n    name:\"bbb\",\n    isMe:false,\n    cardList:[]\n  }\n  const player3={\n    bet:5,\n    name:\"ccc\",\n    isMe:false,\n    cardList:[]\n  }\n  const player4={\n    bet:7,\n    name:\"ddd\",\n    isMe:false,\n    cardList:[]\n  }\n\n  playerList.push(player1)\n  playerList.push(player2)\n  playerList.push(player3) \n  //playerList.push(player4)\n\n  export default playerList",["63","64"],"/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/components/Players.jsx",[],"/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/components/Dealer.jsx",["65","66"],"import { React, useState, useEffect } from 'react';\nimport Card from \"./Cards\"\nimport styles from \"../style/player.module.css\";\n\nconst Dealer=({cardList,isDealerTurn,isDealerAccount,isPlayerAccount,isDealerReveal})=>{\n    \n\n    return(\n        <div className={styles.handContainer}>\n        <div className={styles.cardContainer} >\n          {cardList.map((card, index)=><Card \n          key={index}\n          index={index}\n          value={card.value}\n          type={card.type}\n          num={cardList.length}\n          isDealer={true}\n          isDealerAccount={isDealerAccount}\n          isPlayerAccount={isPlayerAccount}\n          isDealerReveal={isDealerReveal}\n         \n         />)}\n          \n        </div>\n        </div>\n    )\n}\nexport default Dealer","/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/components/StartDialog.jsx",["67","68"],"import { React, useState, useEffect } from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n//import { getDealer } from '../Web3Client';\n\n\nconst StartDialog=({startHandler,isDealerStart,dealer,account,player,joinGameHandler,setStatusHandler,startGameHandler,setHandHandler,isPlayerJoin})=>{\n\nconst [isOpen, setIsOpen] =useState(true);\nconst [isReady,setIsReady]=useState(false);\nconst [user,setUser]=useState(null);\nconst [isGO,setIsGO]=useState(null);\nconst [isJoin,setIsJoin]=useState(null)\n\nconst nullPlayer=\"0x0000000000000000000000000000000000000000\";\n\n\nuseEffect(()=>{\n  if(account!==null&&dealer!==null){\n    if(account.toLowerCase()===dealer.toLowerCase()&&player!==nullPlayer){\n    setIsReady(true)\n    return}\n    \n  else{\n    setIsReady(false)\n  }\n  }\n  else{\n    setIsReady(false)\n  }\n  \n},[dealer,account,player])\n\nuseEffect(()=>{\n  if(account!==null&&dealer!==null){\n  if(account.toLowerCase()===dealer.toLowerCase()){\n    if(player!==nullPlayer){\n      setUser(-1)\n      return\n    }\n    else{\n      setUser(0)\n    return\n    }\n    \n  }\n  if(account.toLowerCase()===player.toLowerCase()){\n    setUser(1)\n    return\n  }\n  else{\n    setUser(null)\n\n  }\n  \n}\n\n},[dealer,account,player])\n\n\n\n  useEffect(()=>{\n    setIsGO(isDealerStart)\n\n  },[isDealerStart])\n\n  useEffect(()=>{\n    setIsJoin(isPlayerJoin)\n\n  },[isPlayerJoin])\n\n\n\n\n\n\n\n  return (\n    <div>\n      <Dialog\n        open={isOpen}\n        //onClose={()=>{setIsOpen(false)}}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {user===1&&(<Typography>{\"Welcome player\"}</Typography>)}\n          {user===0&&(<Typography>{\"Welcome dealer\"}</Typography>)}\n          {user===-1&&(<Typography>{\"Welcome dealer\"}</Typography>)}\n          {user===null&&(<Typography>{\"Welcome\"}</Typography>)}\n        </DialogTitle>\n        <DialogContent>\n          \n          <DialogContentText id=\"alert-dialog-description\" >\n           {user===null&&(<div><Typography>{`Dealer is ${dealer}`}</Typography><Typography>{`This is your current address: ${account}`}</Typography></div>)}\n            {user===0&&(<Typography>{\"Waiting for player joing game...\"}</Typography>)}\n            {user===1&&(<Typography>{\"Waiting for dealer starting game...\"}</Typography>)}\n            {(isJoin&&user===-1)&&(<Typography>{`Player ${player} is waiting...` }</Typography>)}\n\n            \n          </DialogContentText>\n         \n        </DialogContent>\n        <DialogActions>\n          {(isJoin&&user===-1)&&<Button onClick={()=>\n          {\n            startGameHandler()\n            setIsOpen(false)\n            //setisDealerStartHandler()\n            //console.log(isDealerStart)\n\n            }} >\n            start game\n          </Button>}\n          \n          {user===null&&<Button onClick={()=>\n          {\n            joinGameHandler()\n            }} >\n            join\n          </Button>}\n          {isGO&&<Button onClick={()=>\n          {\n            setHandHandler()\n            setIsOpen(false)\n\n            }} >\n            go\n          </Button>}\n          \n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\nexport default StartDialog","/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/components/Cards.jsx",[],"/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/components/PlayerStatus.jsx",[],"/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/Web3Client.js",[],"/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/components/GameOverDialog.jsx",["69","70"],"import { React, useState, useEffect } from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n\nconst GameOverDialog=({gameStart,playerWin,isDealerAccount,isPlayerAccount,withdrawHandler,playerBal})=>{\n\n    const [isWin,setIsWin]=useState(null)\n    const [isOpen, setIsOpen] =useState(false);\n\n    useEffect(()=>{\n        if(gameStart===false&&playerWin!==null){\n            setIsOpen(false)\n            setIsWin(playerWin)\n            \n        }\n        console.log(\"win: \",isWin)\n\n    },[gameStart,playerWin])\n\n\n    return (\n\n        <div>\n        <Dialog\n          open={isOpen&&isPlayerAccount}\n          //onClose={()=>{setIsOpen(false)}}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogTitle id=\"alert-dialog-title\">\n            {(isWin&&isPlayerAccount)&&<Typography>{\"Congrats player\"}</Typography>}\n            {(!isWin&&isPlayerAccount)&&<Typography>{\"Game over\"}</Typography>}\n            \n          </DialogTitle>\n          <DialogContent>\n            \n            <DialogContentText id=\"alert-dialog-description\" >\n            {(isWin&&isPlayerAccount)&&<Typography>{\"You won!\"}</Typography>}\n            {(!isWin&&isPlayerAccount)&&<Typography>{\"You lost!\"}</Typography>}\n  \n              \n            </DialogContentText>\n           \n          </DialogContent>\n          <DialogActions>\n          {<Button onClick={()=>\n          {\n            withdrawHandler()\n            setIsOpen(false)\n\n            }}\n            disabled={playerBal>0} >\n            withdraw\n          </Button>}\n\n          {isPlayerAccount&&<Button onClick={()=>\n          {\n           \n            setIsOpen(false)\n\n            }} >\n           quit\n          </Button>}\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n\n}\nexport default GameOverDialog;",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":22,"column":9,"nodeType":"77","messageId":"78","endLine":22,"endColumn":21},{"ruleId":"75","severity":1,"message":"79","line":69,"column":9,"nodeType":"77","messageId":"78","endLine":69,"endColumn":19},{"ruleId":"75","severity":1,"message":"80","line":83,"column":9,"nodeType":"77","messageId":"78","endLine":83,"endColumn":20},{"ruleId":"75","severity":1,"message":"81","line":94,"column":9,"nodeType":"77","messageId":"78","endLine":94,"endColumn":25},{"ruleId":"75","severity":1,"message":"82","line":117,"column":10,"nodeType":"77","messageId":"78","endLine":117,"endColumn":14},{"ruleId":"75","severity":1,"message":"83","line":279,"column":11,"nodeType":"77","messageId":"78","endLine":279,"endColumn":17},{"ruleId":"75","severity":1,"message":"83","line":297,"column":11,"nodeType":"77","messageId":"78","endLine":297,"endColumn":17},{"ruleId":"75","severity":1,"message":"84","line":22,"column":9,"nodeType":"77","messageId":"78","endLine":22,"endColumn":16},{"ruleId":"71","replacedBy":"85"},{"ruleId":"73","replacedBy":"86"},{"ruleId":"75","severity":1,"message":"87","line":1,"column":17,"nodeType":"77","messageId":"78","endLine":1,"endColumn":25},{"ruleId":"75","severity":1,"message":"88","line":1,"column":27,"nodeType":"77","messageId":"78","endLine":1,"endColumn":36},{"ruleId":"75","severity":1,"message":"89","line":8,"column":8,"nodeType":"77","messageId":"78","endLine":8,"endColumn":17},{"ruleId":"75","severity":1,"message":"90","line":16,"column":8,"nodeType":"77","messageId":"78","endLine":16,"endColumn":15},{"ruleId":"75","severity":1,"message":"89","line":8,"column":8,"nodeType":"77","messageId":"78","endLine":8,"endColumn":17},{"ruleId":"91","severity":1,"message":"92","line":24,"column":7,"nodeType":"93","endLine":24,"endColumn":28,"suggestions":"94"},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'PROVIDER_URL' is assigned a value but never used.","Identifier","unusedVar","'nullPlayer' is assigned a value but never used.","'contractBal' is assigned a value but never used.","'initialCardCount' is assigned a value but never used.","'time' is assigned a value but never used.","'result' is assigned a value but never used.","'player4' is assigned a value but never used.",["95"],["96"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'TextField' is defined but never used.","'isReady' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isWin'. Either include it or remove the dependency array.","ArrayExpression",["97"],"no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},"Update the dependencies array to be: [gameStart, isWin, playerWin]",{"range":"100","text":"101"},[864,885],"[gameStart, isWin, playerWin]"]