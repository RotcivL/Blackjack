{"ast":null,"code":"import Web3 from \"web3\";\nimport BlackJackContractBuild from \"contracts/BlackJackV2.json\"; //let BlackJackContract;\n\nlet isInitial = false; //const PROVIDER_URL='http://localhost:3000'\n\nexport const initializeContract = async () => {\n  let provider = window.ethereum;\n  const web3 = new Web3(provider);\n  const networkID = await web3.eth.net.getId(); //console.log(networkID)\n\n  const contractAddress = BlackJackContractBuild.networks[networkID].address;\n  BlackJackContract = new web3.eth.Contract(BlackJackContractBuild.abi, BlackJackContractBuild.networks[networkID].address); //const account= await BlackJackContract.methods.getDealer().call()\n\n  const accounts = await web3.eth.getAccounts(); //const dealer= await BlackJackContract.methods.dealer().call()\n\n  const balance = await web3.eth.getBalance(contractAddress);\n  BlackJackContract.methods.joinGame().send({\n    from: accounts[0],\n    value: 10\n  });\n};\nexport const joinGame = () => {\n  if (isInitial) {\n    deploy();\n  } else {//BlackJackContract.methods.joinGame().send()\n  }\n};","map":{"version":3,"names":["Web3","BlackJackContractBuild","isInitial","initializeContract","provider","window","ethereum","web3","networkID","eth","net","getId","contractAddress","networks","address","BlackJackContract","Contract","abi","accounts","getAccounts","balance","getBalance","methods","joinGame","send","from","value","deploy"],"sources":["/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/Web3Client.js"],"sourcesContent":["import Web3 from \"web3\"\nimport BlackJackContractBuild from \"contracts/BlackJackV2.json\"\n\n//let BlackJackContract;\nlet isInitial=false;\n//const PROVIDER_URL='http://localhost:3000'\n\nexport const initializeContract= async ()=>{\n\nlet provider = window.ethereum \n\nconst web3 =new Web3(provider)\n\nconst networkID= await web3.eth.net.getId()\n//console.log(networkID)\nconst contractAddress=BlackJackContractBuild.networks[networkID].address \nBlackJackContract= new web3.eth.Contract(BlackJackContractBuild.abi,BlackJackContractBuild.networks[networkID].address)\n    //const account= await BlackJackContract.methods.getDealer().call()\nconst accounts = await web3.eth.getAccounts();\n    //const dealer= await BlackJackContract.methods.dealer().call()\nconst balance=await web3.eth.getBalance(contractAddress)\nBlackJackContract.methods.joinGame().send({from:accounts[0],value:10})\n} \n\n\n\nexport const joinGame=()=>{\n    if(isInitial){\n        deploy();\n    }\n    else{\n        //BlackJackContract.methods.joinGame().send()\n    }\n    \n\n}\n\n\n\n"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,4BAAnC,C,CAEA;;AACA,IAAIC,SAAS,GAAC,KAAd,C,CACA;;AAEA,OAAO,MAAMC,kBAAkB,GAAE,YAAU;EAE3C,IAAIC,QAAQ,GAAGC,MAAM,CAACC,QAAtB;EAEA,MAAMC,IAAI,GAAE,IAAIP,IAAJ,CAASI,QAAT,CAAZ;EAEA,MAAMI,SAAS,GAAE,MAAMD,IAAI,CAACE,GAAL,CAASC,GAAT,CAAaC,KAAb,EAAvB,CAN2C,CAO3C;;EACA,MAAMC,eAAe,GAACX,sBAAsB,CAACY,QAAvB,CAAgCL,SAAhC,EAA2CM,OAAjE;EACAC,iBAAiB,GAAE,IAAIR,IAAI,CAACE,GAAL,CAASO,QAAb,CAAsBf,sBAAsB,CAACgB,GAA7C,EAAiDhB,sBAAsB,CAACY,QAAvB,CAAgCL,SAAhC,EAA2CM,OAA5F,CAAnB,CAT2C,CAUvC;;EACJ,MAAMI,QAAQ,GAAG,MAAMX,IAAI,CAACE,GAAL,CAASU,WAAT,EAAvB,CAX2C,CAYvC;;EACJ,MAAMC,OAAO,GAAC,MAAMb,IAAI,CAACE,GAAL,CAASY,UAAT,CAAoBT,eAApB,CAApB;EACAG,iBAAiB,CAACO,OAAlB,CAA0BC,QAA1B,GAAqCC,IAArC,CAA0C;IAACC,IAAI,EAACP,QAAQ,CAAC,CAAD,CAAd;IAAkBQ,KAAK,EAAC;EAAxB,CAA1C;AACC,CAfM;AAmBP,OAAO,MAAMH,QAAQ,GAAC,MAAI;EACtB,IAAGrB,SAAH,EAAa;IACTyB,MAAM;EACT,CAFD,MAGI,CACA;EACH;AAGJ,CATM"},"metadata":{},"sourceType":"module"}