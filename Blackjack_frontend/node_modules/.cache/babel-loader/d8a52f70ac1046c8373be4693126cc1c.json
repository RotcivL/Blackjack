{"ast":null,"code":"var _jsxFileName = \"/Users/tedwu/Desktop/\\u672A\\u547D\\u540D\\u6A94\\u6848\\u593E 4/Blackjack/Blackjack_frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport Dealer from './components/Dealer';\nimport Player from './components/Players';\nimport styles from \"../src/style/table.module.css\";\nimport backgroundImage from \"./table_background.jpeg\";\nimport StartDialog from './components/StartDialog';\nimport Button from '@mui/material/Button';\nimport { initializeContract, joinGame, getStatus, startGame, getHandCard, playerHitCard, getGameStart, getPlayerWin, playerStand, startGameEventListener } from \"./Web3Client\";\nimport GameOverDialog from './components/GameOverDialog'; //import ReactDOM from 'react-dom';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const PROVIDER_URL = 'http://localhost:3000';\n\n  const connectWalletHandler = async () => {\n    //const web3= new Web3(PROVIDER_URL)\n    let provider = window.ethereum;\n\n    if (typeof provider !== \"undefined\") {\n      try {\n        const accounts = await provider.request({\n          method: \"eth_requestAccounts\"\n        });\n        setAccount(accounts[0]);\n      } catch (err) {\n        console.log(\"err:\", err);\n      }\n    } else {\n      alert(\"You need to install MetaMask.\");\n    }\n  };\n  /*\n  This method is for initiallizing deck \n  */\n\n\n  const deckBuilder = () => {\n    const temp_deck = [];\n    const values = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"];\n    const types = [\"C\", \"D\", \"H\", \"S\"];\n\n    for (let i = 0; i < types.length; i++) {\n      for (let j = 0; j < values.length; j++) {\n        temp_deck.push({\n          value: values[j],\n          type: types[i]\n        });\n      }\n    }\n\n    for (let i = temp_deck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = temp_deck[i];\n      temp_deck[i] = temp_deck[j];\n      temp_deck[j] = temp;\n    }\n\n    return temp_deck;\n  };\n\n  const cardInterpreter = cardIndexList => {\n    const temp_cardList = [];\n    const values = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"];\n    const types = [\"C\", \"D\", \"H\", \"S\"];\n\n    for (let i = 0; i < cardIndexList.length; i++) {\n      const index = cardIndexList[i];\n      const value_index = index % 52 % 13;\n      const type_index = Math.floor(index % 52 / 13);\n      const card = {\n        value: values[value_index],\n        type: types[type_index]\n      };\n      temp_cardList.push(card);\n    }\n\n    return temp_cardList;\n  };\n\n  const dealingInterval = 2000;\n  const [account, setAccount] = useState(null);\n  const [dealer, setDealer] = useState(null); //const [metamaskAccount,setmetamaskAccount]=useState(null)\n\n  const [dealerBal, setDealerBal] = useState(null);\n  const [player, setPlayer] = useState(null);\n  const [playerBal, setPlayerBal] = useState(null);\n  const [contractBal, setContractBal] = useState(null);\n  const [gameStart, setGameStart] = useState(null);\n  const [playerWin, setPlayerWin] = useState(null);\n  const initialCardCount = 2;\n  const [isDealerStart, setisDealerStart] = useState(null);\n  const [playerList, setPlayerList] = useState([]);\n  const [deck] = useState(deckBuilder());\n  const [dealerCardList, setDealerCardList] = useState([]);\n  const [turnIndex, setTurnIndex] = useState('');\n  const [isDealerTurn, setIsDealerTurn] = useState(false);\n  const [isPlayerAccount, setIsPlayerAccount] = useState(null);\n  const [isDealerAccount, setIsDealerAccount] = useState(null);\n\n  const wait = ms => new Promise(resolve => setTimeout(resolve, ms));\n  /*\n  Fetch players' data and then initiallize player list.\n  When isRoundStarted truns true, each player gets their initial cards by triggering dealing method\n  */\n\n\n  useEffect(() => {\n    async function listenMMAccount() {\n      window.ethereum.on(\"accountsChanged\", async function () {\n        // Time to reload your interface with accounts[0]!\n        let provider = window.ethereum;\n        const accounts = await provider.request({\n          method: \"eth_requestAccounts\"\n        });\n        setAccount(accounts[0]); // accounts = await web3.eth.getAccounts();\n      });\n    }\n\n    listenMMAccount();\n  }, []);\n  useEffect(() => {\n    connectWalletHandler();\n    setStatusHandler();\n  }, [isDealerStart, player]);\n  useEffect(() => {\n    const currentUser = async () => {\n      if (player !== null && dealer !== null && account !== null) {\n        setIsDealerAccount(dealer.toLowerCase() === account.toLowerCase());\n        setIsPlayerAccount(player.toLowerCase() === account.toLowerCase());\n      }\n    };\n\n    currentUser();\n  }, [account, player, dealer]);\n  useEffect(() => {\n    const startGameListener = async () => {\n      const results = await startGameEventListener();\n      if (results) console.log(\"test gamestart listener\", results[0].returnValues);\n    };\n\n    startGameListener();\n  });\n\n  const joinGameHandler = async () => {\n    const result = await joinGame();\n\n    if (result) {\n      await setStatusHandler();\n    }\n  };\n\n  const startGameHandler = async () => {\n    const result = await startGame();\n\n    if (result) {\n      await setStatusHandler();\n      await setHandHandler();\n      await wait(dealingInterval * 4);\n      const gameStart_ = await getGameStart();\n      const playerWin_ = await getPlayerWin();\n      setGameStart(gameStart_);\n      setPlayerWin(playerWin_);\n    }\n  };\n\n  const setStatusHandler = async () => {\n    const statusArr = await getStatus(); //setmetamaskAccount(statusArr.metamask_account)\n\n    setDealer(statusArr[0].dealer);\n    setDealerBal(statusArr[0].dealerBal);\n    setPlayer(statusArr[0].player);\n    setPlayerBal(statusArr[0].playerBal);\n    setContractBal(statusArr[0].contractBal); //setGameStart(statusArr[0].gameStart)\n  };\n\n  const setHandHandler = async () => {\n    const handCard = await getHandCard();\n    const player_add = player;\n    const temp_playerList = playerList;\n    const temp_dealerCardList = dealerCardList;\n    const dealerHand_index = handCard.dealerHand;\n    const playerHand_index = handCard.playerHand;\n\n    if (dealerHand_index == null || playerHand_index == null) {\n      return;\n    }\n\n    const dealerHand = cardInterpreter(dealerHand_index);\n    const playerHand = cardInterpreter(playerHand_index);\n    const player_json = {\n      address: player_add,\n      cardList: [],\n      name: \"goodguy\",\n      isMe: true,\n      bet: 10\n    };\n    temp_playerList.push(player_json);\n\n    for (let i = 0; i < 2; i++) {\n      temp_playerList[0].cardList.push(playerHand[i]);\n      setPlayerList([...temp_playerList]);\n      await wait(dealingInterval);\n      temp_dealerCardList.push(dealerHand[i]);\n      setDealerCardList([...temp_dealerCardList]);\n      await wait(dealingInterval);\n    } //setisDealerStart(false)\n\n\n    setTurnIndex(0); //console.log(dealerHand,dealerHand_index)\n    //console.log(dealerCardList,playerList)\n  };\n  /*\n    In certain amount of duration, normal player gets card with clockwise order.\n    Dealer gets card lastly.\n    */\n\n  /*\n    Start dealing cards.\n    */\n\n\n  const setisDealerStartHandler = () => {\n    setisDealerStart(true);\n  };\n\n  const nextPlayerHandler = () => {\n    if (turnIndex < playerList.length - 1) {\n      const nextIndex = turnIndex + 1;\n      setTurnIndex(nextIndex);\n    } else {\n      setIsDealerTurn(true);\n    }\n  };\n\n  const hitHandler = async index => {\n    const result = await playerHitCard();\n    const temp_playerList = playerList;\n    const temp_cardList = temp_playerList[index].cardList;\n    const handCardNum = temp_cardList.length;\n    const handCard = await getHandCard();\n    const playerHand_index = handCard.playerHand;\n    const playerHand = cardInterpreter(playerHand_index);\n    temp_playerList[index].cardList.push(playerHand[handCardNum]);\n    setPlayerList([...temp_playerList]);\n    const gameStart_ = await getGameStart();\n    const playerWin_ = await getPlayerWin();\n    setGameStart(gameStart_);\n    setPlayerWin(playerWin_);\n  };\n\n  const playerStandHandler = async () => {\n    const result = await playerStand();\n    const temp_dealerCardList = dealerCardList;\n    const oldHandCardNum = temp_dealerCardList.length;\n    const handCard = await getHandCard();\n    const dealerHandCard_index = handCard.dealerHand;\n    const dealerHandCard = cardInterpreter(dealerHandCard_index); //console.log(\"dealerhand: \",dealerHandCard)\n\n    const addedCardNum = dealerHandCard.length - oldHandCardNum;\n\n    if (addedCardNum > 0) {\n      for (let i = 0; i < addedCardNum; i++) {\n        temp_dealerCardList.push(dealerHandCard[i + 2]);\n        console.log(temp_dealerCardList);\n        setDealerCardList([...temp_dealerCardList]);\n        await wait(dealingInterval);\n      }\n    }\n\n    const gameStart_ = await getGameStart();\n    const playerWin_ = await getPlayerWin();\n    setGameStart(gameStart_);\n    setPlayerWin(playerWin_);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      style: {\n        position: \"absolute\",\n        marginLeft: \"1800px\",\n        paddingTop: \"30px\",\n        paddingRight: \"30px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(StartDialog, {\n        setisDealerStartHandler: setisDealerStartHandler,\n        initializeContract: initializeContract,\n        isDealerStart: isDealerStart,\n        dealer: dealer,\n        player: player,\n        account: account,\n        joinGameHandler: joinGameHandler,\n        setStatusHandler: setStatusHandler,\n        startGameHandler: startGameHandler,\n        setHandHandler: setHandHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(GameOverDialog, {\n        gameStart: gameStart,\n        bet: playerBal,\n        playerWin: playerWin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.table,\n      style: {\n        backgroundImage: `url(${backgroundImage})`\n      },\n      children: [/*#__PURE__*/_jsxDEV(Dealer, {\n        cardList: dealerCardList,\n        isDealerTurn: isDealerTurn,\n        isDealerAccount: isDealerAccount,\n        isPlayerAccount: isPlayerAccount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 5\n      }, this), playerList.map((player, index) => /*#__PURE__*/_jsxDEV(Player, {\n        playerIndex: index,\n        name: player.name,\n        isDealerAccount: isDealerAccount,\n        isPlayerAccount: isPlayerAccount,\n        bet: player.bet,\n        cardList: player.cardList,\n        whosTurn: turnIndex,\n        nextPlayerHandler: nextPlayerHandler,\n        hitHandler: hitHandler,\n        playerStandHandler: playerStandHandler\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 38\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"GvuJWsmgkvV5XwhKdSUsj1tZEns=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Dealer","Player","styles","backgroundImage","StartDialog","Button","initializeContract","joinGame","getStatus","startGame","getHandCard","playerHitCard","getGameStart","getPlayerWin","playerStand","startGameEventListener","GameOverDialog","App","PROVIDER_URL","connectWalletHandler","provider","window","ethereum","accounts","request","method","setAccount","err","console","log","alert","deckBuilder","temp_deck","values","types","i","length","j","push","value","type","Math","floor","random","temp","cardInterpreter","cardIndexList","temp_cardList","index","value_index","type_index","card","dealingInterval","account","dealer","setDealer","dealerBal","setDealerBal","player","setPlayer","playerBal","setPlayerBal","contractBal","setContractBal","gameStart","setGameStart","playerWin","setPlayerWin","initialCardCount","isDealerStart","setisDealerStart","playerList","setPlayerList","deck","dealerCardList","setDealerCardList","turnIndex","setTurnIndex","isDealerTurn","setIsDealerTurn","isPlayerAccount","setIsPlayerAccount","isDealerAccount","setIsDealerAccount","wait","ms","Promise","resolve","setTimeout","listenMMAccount","on","setStatusHandler","currentUser","toLowerCase","startGameListener","results","returnValues","joinGameHandler","result","startGameHandler","setHandHandler","gameStart_","playerWin_","statusArr","handCard","player_add","temp_playerList","temp_dealerCardList","dealerHand_index","dealerHand","playerHand_index","playerHand","player_json","address","cardList","name","isMe","bet","setisDealerStartHandler","nextPlayerHandler","nextIndex","hitHandler","handCardNum","playerStandHandler","oldHandCardNum","dealerHandCard_index","dealerHandCard","addedCardNum","position","marginLeft","paddingTop","paddingRight","table","map"],"sources":["/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/App.js"],"sourcesContent":["\nimport { React, useState, useEffect } from 'react';\nimport Dealer from './components/Dealer';\nimport Player from './components/Players';\nimport styles from \"../src/style/table.module.css\"\nimport backgroundImage from \"./table_background.jpeg\"\nimport StartDialog from './components/StartDialog';\nimport Button from '@mui/material/Button';\nimport {initializeContract, joinGame, getStatus, startGame,getHandCard,playerHitCard, getGameStart, getPlayerWin, playerStand,startGameEventListener} from \"./Web3Client\";\nimport GameOverDialog from './components/GameOverDialog';\n\n\n\n\n\n//import ReactDOM from 'react-dom';\n\n\n\nconst App=()=> {\n\n  const PROVIDER_URL='http://localhost:3000'\n\n  const connectWalletHandler= async()=>{\n    //const web3= new Web3(PROVIDER_URL)\n    let provider=window.ethereum;\n    if(typeof provider!==\"undefined\"){\n      try{\n        const accounts= await provider.request({method:\"eth_requestAccounts\"})\n        setAccount(accounts[0])\n      }catch(err){\n        console.log(\"err:\",err)\n      }\n       \n\n    }\n    else{\n      alert(\"You need to install MetaMask.\")\n    }\n\n  }\n    \n\n  \n\n\n\n  /*\n  This method is for initiallizing deck \n  */\n  const deckBuilder=()=>{\n    const temp_deck=[]\n    const values = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"];\n    const types = [\"C\", \"D\", \"H\", \"S\"]; \n    for (let i=0;i<types.length;i++ ){\n      for(let j=0;j<values.length;j++){\n       temp_deck.push({value:values[j],\n                   type:types[i]})\n      }\n    }\n    for (let i = temp_deck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = temp_deck[i];\n      temp_deck[i] = temp_deck[j];\n      temp_deck[j] = temp;\n  }\n  return temp_deck\n   }\n\n   const cardInterpreter=(cardIndexList)=>{\n     const temp_cardList=[]\n     const values = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"];\n     const types = [\"C\", \"D\", \"H\", \"S\"];\n     for (let i=0;i<cardIndexList.length;i++){\n       const index=cardIndexList[i]\n       const value_index=index%52%13\n       const type_index=Math.floor(index%52/13)\n       const card={value:values[value_index],type:types[type_index]}\n       temp_cardList.push(card)\n     }\n     return temp_cardList\n\n   }\n \n   \n   \n  const dealingInterval=2000;\n\n  const [account,setAccount]=useState(null)\n\n  const [dealer,setDealer]=useState(null)\n\n  //const [metamaskAccount,setmetamaskAccount]=useState(null)\n\n  const [dealerBal,setDealerBal]=useState(null)\n\n  const[player,setPlayer]=useState(null)\n\n  const[playerBal,setPlayerBal]=useState(null)\n\n  const[contractBal,setContractBal]=useState(null)\n\n  const[gameStart,setGameStart]=useState(null)\n\n  const[playerWin,setPlayerWin]=useState(null)\n\n  \n\n\n\n  \n  const initialCardCount=2\n  \n  const [isDealerStart,setisDealerStart]=useState(null)\n\n  const[playerList,setPlayerList]=useState([])\n  \n  const[deck,]=useState(deckBuilder())\n\n  const[dealerCardList, setDealerCardList]=useState([])\n\n  const[turnIndex,setTurnIndex]=useState('')\n\n  const[isDealerTurn,setIsDealerTurn]=useState(false)\n\n  const [isPlayerAccount,setIsPlayerAccount]=useState(null)\n\n  const [isDealerAccount,setIsDealerAccount]=useState(null)\n\n\n\n\n  const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms))\n  /*\n  Fetch players' data and then initiallize player list.\n  When isRoundStarted truns true, each player gets their initial cards by triggering dealing method\n  */\n  useEffect(() => {\n    async function listenMMAccount() {\n      window.ethereum.on(\"accountsChanged\", async function() {\n        // Time to reload your interface with accounts[0]!\n        let provider=window.ethereum;\n        const accounts= await provider.request({method:\"eth_requestAccounts\"})\n        setAccount(accounts[0])\n       \n        \n        \n        // accounts = await web3.eth.getAccounts();\n      });\n    }\n    listenMMAccount();\n  }, []);\n  \n  \n\n\nuseEffect(()=>{\n  connectWalletHandler()\n  setStatusHandler()\n  \n},[isDealerStart,player])\n\nuseEffect(()=>{\n  const currentUser= async()=>{\n    if(player!==null&&dealer!==null&&account!==null){\n   \n      setIsDealerAccount(dealer.toLowerCase()===account.toLowerCase());\n      setIsPlayerAccount(player.toLowerCase()===account.toLowerCase());\n    }\n\n  }\n  currentUser()\n},[account,player,dealer])\n\nuseEffect(()=>{\n  const startGameListener= async ()=>{\n    const results=await startGameEventListener()\n    if(results)\n    console.log(\"test gamestart listener\",results[0].returnValues)\n  }\n  startGameListener()\n  \n},)\n\n\n\nconst joinGameHandler= async ()=>{\n  const result=await joinGame()\n  if(result){\n    await setStatusHandler()\n  \n  }\n\n}\n\nconst startGameHandler=async()=>{\n  const result=await startGame()\n  if(result){\n    await setStatusHandler()\n    await setHandHandler()\n   \n    await wait(dealingInterval*4)\n    const gameStart_=await getGameStart()\n    const playerWin_=await getPlayerWin()\n    setGameStart(gameStart_)\n    setPlayerWin(playerWin_)\n    \n  }\n}\n\nconst setStatusHandler=async()=>{\n  const statusArr=await getStatus()\n  //setmetamaskAccount(statusArr.metamask_account)\n  setDealer(statusArr[0].dealer)\n  setDealerBal(statusArr[0].dealerBal)\n  setPlayer(statusArr[0].player)\n  setPlayerBal(statusArr[0].playerBal)\n  setContractBal(statusArr[0].contractBal)\n  \n  //setGameStart(statusArr[0].gameStart)\n  \n\n}\n\nconst setHandHandler=async()=>{\n   const handCard=await getHandCard()\n   const player_add=player\n  \n   const temp_playerList=playerList\n   const temp_dealerCardList=dealerCardList\n   const dealerHand_index=handCard.dealerHand\n   const playerHand_index=handCard.playerHand\n   if(dealerHand_index==null||playerHand_index==null){\n     return\n   }\n   const dealerHand=cardInterpreter(dealerHand_index)\n   const playerHand=cardInterpreter(playerHand_index)\n   const player_json={address:player_add,cardList:[],name:\"goodguy\",isMe:true,bet:10}\n   temp_playerList.push(player_json)\n   for (let i=0;i<2;i++){\n    temp_playerList[0].cardList.push(playerHand[i])\n    setPlayerList([...temp_playerList])\n    await wait(dealingInterval)\n    temp_dealerCardList.push(dealerHand[i])\n    setDealerCardList([...temp_dealerCardList])\n    await wait(dealingInterval)\n   }\n   //setisDealerStart(false)\n   setTurnIndex(0)\n   //console.log(dealerHand,dealerHand_index)\n\n   //console.log(dealerCardList,playerList)\n   \n}\n\n \n   \n    \n/*\n  In certain amount of duration, normal player gets card with clockwise order.\n  Dealer gets card lastly.\n  */\n     \n    \n  \n\n\n\n/*\n  Start dealing cards.\n  */\n\n  const setisDealerStartHandler=()=>{\n    setisDealerStart(true)\n  }\n\n  const nextPlayerHandler=()=>{\n    if (turnIndex<playerList.length-1){\n    const nextIndex=turnIndex+1\n    setTurnIndex(nextIndex)\n    }\n    else{\n      setIsDealerTurn(true)\n    }\n  }\n\n  const hitHandler= async (index)=>{\n    \n    const result=await playerHitCard()\n    const temp_playerList=playerList\n    const temp_cardList=temp_playerList[index].cardList\n    const handCardNum=temp_cardList.length\n    const handCard=await getHandCard()\n    const playerHand_index=handCard.playerHand\n    const playerHand=cardInterpreter(playerHand_index)\n    temp_playerList[index].cardList.push(playerHand[handCardNum])\n   \n    setPlayerList([...temp_playerList])\n    const gameStart_=await getGameStart()\n    const playerWin_=await getPlayerWin()\n    setGameStart(gameStart_)\n    setPlayerWin(playerWin_)\n\n  }\n\n  const playerStandHandler= async ()=>{\n    const result=await playerStand()\n    const temp_dealerCardList=dealerCardList\n    const oldHandCardNum=temp_dealerCardList.length\n    const handCard=await getHandCard()\n    const dealerHandCard_index=handCard.dealerHand\n    const dealerHandCard=cardInterpreter(dealerHandCard_index)\n    //console.log(\"dealerhand: \",dealerHandCard)\n    const addedCardNum=dealerHandCard.length-oldHandCardNum\n    if(addedCardNum>0){\n      for (let i=0;i<addedCardNum;i++){\n        temp_dealerCardList.push(dealerHandCard[i+2])\n        console.log(temp_dealerCardList)\n        setDealerCardList([...temp_dealerCardList])\n        await wait(dealingInterval)\n\n      }\n    }\n    const gameStart_=await getGameStart()\n    const playerWin_=await getPlayerWin()\n\n    setGameStart(gameStart_)\n    setPlayerWin(playerWin_)\n\n    \n   \n  }\n\n\n \n  \n\n\n  \n\n  return (\n    <>\n    <section\n    style={\n      {\n        position:\"absolute\",\n        marginLeft:\"1800px\",\n        paddingTop:\"30px\",\n        paddingRight:\"30px\"\n\n      }\n    }\n    >\n     <StartDialog\n    setisDealerStartHandler={setisDealerStartHandler}\n    initializeContract={initializeContract}\n    isDealerStart={isDealerStart}\n    dealer={dealer}\n    player={player}\n    account={account}\n    joinGameHandler={joinGameHandler}\n    setStatusHandler={setStatusHandler}\n    startGameHandler={startGameHandler}\n    setHandHandler={setHandHandler}\n    \n    \n\n    />\n    <GameOverDialog\n    gameStart={gameStart}\n    bet={playerBal}\n    playerWin={playerWin}\n    />\n   \n   \n  \n   </section>\n    <div \n    className={styles.table}\n    style={{backgroundImage: `url(${backgroundImage})`}}\n    >\n   \n   \n    <Dealer\n    cardList={dealerCardList}\n    isDealerTurn={isDealerTurn}\n    isDealerAccount={isDealerAccount}\n    isPlayerAccount={isPlayerAccount}\n    />\n    \n    {playerList.map((player, index)=><Player\n      key={index}\n      playerIndex={index}\n      name={player.name}\n      isDealerAccount={isDealerAccount}\n      isPlayerAccount={isPlayerAccount}\n      bet={player.bet}\n      cardList={player.cardList}\n      whosTurn={turnIndex}\n      nextPlayerHandler={nextPlayerHandler}\n      hitHandler={hitHandler}\n      playerStandHandler={playerStandHandler}\n      />\n    )}\n    \n    </div>\n    </>\n  )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}