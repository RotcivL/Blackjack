{"ast":null,"code":"var _jsxFileName = \"/Users/tedwu/Desktop/\\u672A\\u547D\\u540D\\u6A94\\u6848\\u593E 4/Blackjack/Blackjack_frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport Dealer from './components/Dealer';\nimport Player from './components/Players';\nimport styles from \"../src/style/table.module.css\";\nimport backgroundImage from \"./table_background.jpeg\";\nimport StartDialog from './components/StartDialog';\nimport Button from '@mui/material/Button';\nimport { initializeContract, joinGame, getStatus, startGame, getHandCard, playerHitCard, getGameStart, getPlayerWin, playerStand, startGameEventListener, joinGameEventListener, playerHitEventListener, playerStandEventListener, withdraw } from \"./Web3Client\";\nimport GameOverDialog from './components/GameOverDialog';\nimport Typography from '@mui/material/Typography'; //import ReactDOM from 'react-dom';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const PROVIDER_URL = 'http://localhost:3000';\n\n  const connectWalletHandler = async () => {\n    //const web3= new Web3(PROVIDER_URL)\n    let provider = window.ethereum;\n\n    if (typeof provider !== \"undefined\") {\n      try {\n        const accounts = await provider.request({\n          method: \"eth_requestAccounts\"\n        });\n        setAccount(accounts[0]);\n      } catch (err) {\n        console.log(\"err:\", err);\n      }\n    } else {\n      alert(\"You need to install MetaMask.\");\n    }\n  };\n\n  const cardInterpreter = cardIndexList => {\n    const temp_cardList = [];\n    const values = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"];\n    const types = [\"C\", \"D\", \"H\", \"S\"];\n\n    for (let i = 0; i < cardIndexList.length; i++) {\n      const index = cardIndexList[i];\n      const value_index = index % 52 % 13;\n      const type_index = Math.floor(index % 52 / 13);\n      const card = {\n        value: values[value_index],\n        type: types[type_index]\n      };\n      temp_cardList.push(card);\n    }\n\n    return temp_cardList;\n  };\n\n  const dealingInterval = 2000;\n  const nullPlayer = \"0x0000000000000000000000000000000000000000\";\n  const [account, setAccount] = useState(null);\n  const [dealer, setDealer] = useState(null); //const [metamaskAccount,setmetamaskAccount]=useState(null)\n\n  const [dealerBal, setDealerBal] = useState(null);\n  const [player, setPlayer] = useState(null);\n  const [playerBal, setPlayerBal] = useState(null);\n  const [contractBal, setContractBal] = useState(null);\n  const [gameStart, setGameStart] = useState(null);\n  const [playerWin, setPlayerWin] = useState(null);\n  const initialCardCount = 2;\n  const [isDealerStart, setisDealerStart] = useState(false);\n  const [playerList, setPlayerList] = useState([]); //const[deck,]=useState(deckBuilder())\n\n  const [dealerCardList, setDealerCardList] = useState([]);\n  const [turnIndex, setTurnIndex] = useState('');\n  const [isDealerTurn, setIsDealerTurn] = useState(false);\n  const [isPlayerAccount, setIsPlayerAccount] = useState(null);\n  const [isDealerAccount, setIsDealerAccount] = useState(null);\n  const [isPlayerJoin, setIsPlayerJoin] = useState(null);\n  const [isDealerReveal, setIsDealerReveal] = useState(false);\n  const [time, setTime] = useState(Date.now()); // useEffect(() => {\n  //   const interval = setInterval(() => setTime(Date.now()), 1000);\n  //   return () => {\n  //     clearInterval(interval);\n  //   };\n  // }, []);\n\n  const wait = ms => new Promise(resolve => setTimeout(resolve, ms));\n  /*\n  Fetch players' data and then initiallize player list.\n  When isRoundStarted truns true, each player gets their initial cards by triggering dealing method\n  */\n\n\n  useEffect(() => {\n    async function listenMMAccount() {\n      window.ethereum.on(\"accountsChanged\", async function () {\n        // Time to reload your interface with accounts[0]!\n        let provider = window.ethereum;\n        const accounts = await provider.request({\n          method: \"eth_requestAccounts\"\n        });\n        setAccount(accounts[0]); // accounts = await web3.eth.getAccounts();\n      });\n    }\n\n    listenMMAccount();\n  }, []);\n  useEffect(() => {\n    connectWalletHandler();\n    setStatusHandler();\n  }, [isDealerStart, player]);\n  useEffect(() => {\n    const currentUser = async () => {\n      if (player !== null && dealer !== null && account !== null) {\n        setIsDealerAccount(dealer.toLowerCase() === account.toLowerCase());\n        setIsPlayerAccount(player.toLowerCase() === account.toLowerCase());\n      }\n    };\n\n    currentUser();\n  }, [account, player, dealer]);\n\n  const joinGameHandler = async () => {\n    const result = await joinGame();\n\n    if (result) {\n      await setStatusHandler();\n    }\n  };\n\n  const isDealerRevealHandler = () => {\n    setIsDealerReveal(true);\n  };\n\n  const startGameHandler = async () => {\n    const result = await startGame();\n\n    if (result) {\n      await setStatusHandler();\n      await setHandHandler(); //setisDealerStart(true)\n\n      await wait(dealingInterval * 4);\n      const gameStart_ = await getGameStart();\n      const playerWin_ = await getPlayerWin();\n      setGameStart(gameStart_);\n      setPlayerWin(playerWin_);\n    }\n  };\n\n  const setStatusHandler = async () => {\n    const statusArr = await getStatus(); //setmetamaskAccount(statusArr.metamask_account)\n\n    setDealer(statusArr[0].dealer);\n    setDealerBal(statusArr[0].dealerBal);\n    setPlayer(statusArr[0].player);\n    setPlayerBal(statusArr[0].playerBal);\n    setContractBal(statusArr[0].contractBal); //setGameStart(statusArr[0].gameStart)\n  };\n\n  const setHandHandler = async () => {\n    const handCard = await getHandCard();\n    const player_add = player;\n    const temp_playerList = playerList;\n    const temp_dealerCardList = dealerCardList;\n    const dealerHand_index = handCard.dealerHand;\n    const playerHand_index = handCard.playerHand;\n\n    if (dealerHand_index == null || playerHand_index == null) {\n      return;\n    }\n\n    const dealerHand = cardInterpreter(dealerHand_index);\n    const playerHand = cardInterpreter(playerHand_index);\n    const player_json = {\n      address: player_add,\n      cardList: [],\n      name: \"goodguy\",\n      isMe: true,\n      bet: 10\n    };\n    temp_playerList.push(player_json);\n\n    for (let i = 0; i < 2; i++) {\n      temp_playerList[0].cardList.push(playerHand[i]);\n      setPlayerList([...temp_playerList]);\n      await wait(dealingInterval);\n      temp_dealerCardList.push(dealerHand[i]);\n      setDealerCardList([...temp_dealerCardList]);\n      await wait(dealingInterval);\n    } //setisDealerStart(false)\n\n\n    setTurnIndex(0); //console.log(dealerHand,dealerHand_index)\n    //console.log(dealerCardList,playerList)\n  };\n  /*\n    Start dealing cards.\n    */\n\n\n  const setisDealerStartHandler = () => {\n    setisDealerStart(true);\n  };\n\n  const nextPlayerHandler = () => {\n    if (turnIndex < playerList.length - 1) {\n      const nextIndex = turnIndex + 1;\n      setTurnIndex(nextIndex);\n    } else {\n      setIsDealerTurn(true);\n    }\n  };\n\n  const hitHandler = async index => {\n    const result = await playerHitCard();\n    const temp_playerList = playerList;\n    const temp_cardList = temp_playerList[index].cardList;\n    const handCardNum = temp_cardList.length;\n    const handCard = await getHandCard();\n    const playerHand_index = handCard.playerHand;\n    const playerHand = cardInterpreter(playerHand_index);\n    temp_playerList[index].cardList.push(playerHand[handCardNum]);\n    setPlayerList([...temp_playerList]);\n    const gameStart_ = await getGameStart();\n    const playerWin_ = await getPlayerWin();\n    setGameStart(gameStart_);\n    setPlayerWin(playerWin_);\n  };\n\n  const playerStandHandler = async () => {\n    const result = await playerStand(); //console.log(\"player stand: \",result)\n\n    const temp_dealerCardList = dealerCardList;\n    const oldHandCardNum = temp_dealerCardList.length;\n    const handCard = await getHandCard();\n    const dealerHandCard_index = handCard.dealerHand;\n    const dealerHandCard = cardInterpreter(dealerHandCard_index); //console.log(\"dealerhand: \",dealerHandCard)\n\n    const addedCardNum = dealerHandCard.length - oldHandCardNum;\n\n    if (addedCardNum > 0) {\n      for (let i = 0; i < addedCardNum; i++) {\n        temp_dealerCardList.push(dealerHandCard[i + 2]);\n        console.log(temp_dealerCardList);\n        setDealerCardList([...temp_dealerCardList]);\n        await wait(dealingInterval);\n      }\n    }\n\n    const gameStart_ = await getGameStart();\n    const playerWin_ = await getPlayerWin();\n    setGameStart(gameStart_);\n    setPlayerWin(playerWin_);\n  };\n\n  const withdrawHandler = async () => {\n    const result = await withdraw();\n\n    if (result) {\n      console.log(\"successfully withdraw \");\n    }\n  };\n\n  const startGameListener = async () => {\n    const results = await startGameEventListener();\n\n    if (results) {\n      const _gameStart = results.returnValues._gameStart;\n      const _playerWin = results.returnValues._playerWin;\n      const _dealerBalance = results.returnValues._dealerBalance;\n      const _playerBalance = results.returnValues._playerBalance;\n      setisDealerStart(_gameStart);\n      await wait(dealingInterval * 4);\n      setPlayerWin(_playerWin);\n      setDealerBal(_dealerBalance);\n      setPlayerBal(_playerBalance);\n      console.log(\"test gamestart listener\", results.returnValues._gameStart);\n    } // else{\n    //   console.log(\"invalid res\")\n    // }\n\n  };\n\n  startGameListener();\n\n  const joinGameListener = async () => {\n    const results = await joinGameEventListener();\n\n    if (results) {\n      const _player = results.returnValues._player;\n      setPlayer(_player);\n      setIsPlayerJoin(true);\n      console.log(\"test joingame listener\", results.returnValues._player);\n    } // else{\n    //   console.log(\"invalid res\")\n    // }\n\n  };\n\n  joinGameListener();\n\n  const playerHitCardListener = async () => {\n    const results = await playerHitEventListener();\n\n    if (results) {\n      const temp_playerList = playerList;\n      const playerHand_index = results.returnValues._playerHand;\n      const _playerWin = results.returnValues._playerWin;\n      const _dealerBalance = results.returnValues._dealerBalance;\n      const _playerBalance = results.returnValues._playerBalance;\n      const playerHand = cardInterpreter(playerHand_index); //const temp_cardList=temp_playerList[0].cardList\n      //const handCardNum=temp_cardList.length-1\n\n      temp_playerList[0].cardList = playerHand;\n      setPlayerList([...temp_playerList]);\n      setIsDealerReveal(true);\n      setPlayerWin(_playerWin);\n      setDealerBal(_dealerBalance);\n      setPlayerBal(_playerBalance); //console.log(\"test handcard listener\",results.returnValues._playerHand,playerHand,temp_playerList)\n    } // else{\n    //   console.log(\"invalid res\")\n    // }\n\n  };\n\n  playerHitCardListener();\n\n  const playerDealerCardListener = async () => {\n    const results = await playerStandEventListener();\n\n    if (results) {\n      //const temp_dealerList=dealerCardList\n      const dealerHand_index = results.returnValues._dealerHand;\n      const _playerWin = results.returnValues._playerWin;\n      const _dealerBalance = results.returnValues._dealerBalance;\n      const _playerBalance = results.returnValues._playerBalance;\n      const dealerHand = cardInterpreter(dealerHand_index); //const temp_cardList=temp_playerList[0].cardList\n      //const handCardNum=temp_cardList.length-1\n      //temp_dealerList=dealerHand\n\n      setDealerCardList([...dealerHand]);\n      setIsDealerReveal(true);\n      setPlayerWin(_playerWin);\n      setDealerBal(_dealerBalance);\n      setPlayerBal(_playerBalance); //console.log(\"test standcard listener\",temp_dealerList,dealerHand)\n    } // else{\n    //   console.log(\"invalid res\")\n    // }\n\n  };\n\n  playerDealerCardListener();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      style: {\n        position: \"absolute\",\n        marginLeft: \"1800px\",\n        paddingTop: \"30px\",\n        paddingRight: \"30px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(StartDialog, {\n        setisDealerStartHandler: setisDealerStartHandler,\n        initializeContract: initializeContract,\n        isPlayerJoin: isPlayerJoin,\n        isDealerStart: isDealerStart,\n        dealer: dealer,\n        player: player,\n        account: account,\n        joinGameHandler: joinGameHandler,\n        setStatusHandler: setStatusHandler,\n        startGameHandler: startGameHandler,\n        setHandHandler: setHandHandler,\n        startGameEventListener: startGameEventListener,\n        joinGameEventListener: joinGameEventListener\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(GameOverDialog, {\n        gameStart: gameStart,\n        withdrawHandler: withdrawHandler,\n        playerBal: playerBal,\n        playerWin: playerWin,\n        isPlayerAccount: isPlayerAccount,\n        isDealerAccount: isDealerAccount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 5\n      }, this), dealerBal && isPlayerAccount && /*#__PURE__*/_jsxDEV(Typography, {\n        children: `Current balance: ${playerBal}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 36\n      }, this), dealerBal && !isPlayerAccount && isPlayerJoin !== null && /*#__PURE__*/_jsxDEV(Typography, {\n        children: `Current balance: ${dealerBal}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 58\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.table,\n      style: {\n        backgroundImage: `url(${backgroundImage})`\n      },\n      children: [/*#__PURE__*/_jsxDEV(Dealer, {\n        cardList: dealerCardList,\n        isDealerTurn: isDealerTurn,\n        isDealerAccount: isDealerAccount,\n        isPlayerAccount: isPlayerAccount,\n        isDealerReveal: isDealerReveal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 5\n      }, this), playerList.map((player, index) => /*#__PURE__*/_jsxDEV(Player, {\n        playerIndex: index,\n        name: player.name,\n        isDealerAccount: isDealerAccount,\n        isPlayerAccount: isPlayerAccount,\n        bet: player.bet,\n        cardList: player.cardList,\n        whosTurn: turnIndex,\n        nextPlayerHandler: nextPlayerHandler,\n        hitHandler: hitHandler,\n        playerStandHandler: playerStandHandler,\n        isDealerRevealHandler: isDealerRevealHandler,\n        isDealerReveal: isDealerReveal\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 38\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"7JZEkrky6xcHNShRWDSLcR7/HMM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Dealer","Player","styles","backgroundImage","StartDialog","Button","initializeContract","joinGame","getStatus","startGame","getHandCard","playerHitCard","getGameStart","getPlayerWin","playerStand","startGameEventListener","joinGameEventListener","playerHitEventListener","playerStandEventListener","withdraw","GameOverDialog","Typography","App","PROVIDER_URL","connectWalletHandler","provider","window","ethereum","accounts","request","method","setAccount","err","console","log","alert","cardInterpreter","cardIndexList","temp_cardList","values","types","i","length","index","value_index","type_index","Math","floor","card","value","type","push","dealingInterval","nullPlayer","account","dealer","setDealer","dealerBal","setDealerBal","player","setPlayer","playerBal","setPlayerBal","contractBal","setContractBal","gameStart","setGameStart","playerWin","setPlayerWin","initialCardCount","isDealerStart","setisDealerStart","playerList","setPlayerList","dealerCardList","setDealerCardList","turnIndex","setTurnIndex","isDealerTurn","setIsDealerTurn","isPlayerAccount","setIsPlayerAccount","isDealerAccount","setIsDealerAccount","isPlayerJoin","setIsPlayerJoin","isDealerReveal","setIsDealerReveal","time","setTime","Date","now","wait","ms","Promise","resolve","setTimeout","listenMMAccount","on","setStatusHandler","currentUser","toLowerCase","joinGameHandler","result","isDealerRevealHandler","startGameHandler","setHandHandler","gameStart_","playerWin_","statusArr","handCard","player_add","temp_playerList","temp_dealerCardList","dealerHand_index","dealerHand","playerHand_index","playerHand","player_json","address","cardList","name","isMe","bet","setisDealerStartHandler","nextPlayerHandler","nextIndex","hitHandler","handCardNum","playerStandHandler","oldHandCardNum","dealerHandCard_index","dealerHandCard","addedCardNum","withdrawHandler","startGameListener","results","_gameStart","returnValues","_playerWin","_dealerBalance","_playerBalance","joinGameListener","_player","playerHitCardListener","_playerHand","playerDealerCardListener","_dealerHand","position","marginLeft","paddingTop","paddingRight","table","map"],"sources":["/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/App.js"],"sourcesContent":["\nimport { React, useState, useEffect } from 'react';\nimport Dealer from './components/Dealer';\nimport Player from './components/Players';\nimport styles from \"../src/style/table.module.css\"\nimport backgroundImage from \"./table_background.jpeg\"\nimport StartDialog from './components/StartDialog';\nimport Button from '@mui/material/Button';\nimport {initializeContract, joinGame, getStatus, startGame,getHandCard,playerHitCard, getGameStart, getPlayerWin, playerStand,startGameEventListener,joinGameEventListener,playerHitEventListener, playerStandEventListener,withdraw} from \"./Web3Client\";\nimport GameOverDialog from './components/GameOverDialog';\nimport Typography from '@mui/material/Typography';\n\n\n\n\n//import ReactDOM from 'react-dom';\n\n\n\nconst App=()=> {\n\n  const PROVIDER_URL='http://localhost:3000'\n\n  const connectWalletHandler= async()=>{\n    //const web3= new Web3(PROVIDER_URL)\n    let provider=window.ethereum;\n    if(typeof provider!==\"undefined\"){\n      try{\n        const accounts= await provider.request({method:\"eth_requestAccounts\"})\n        setAccount(accounts[0])\n      }catch(err){\n        console.log(\"err:\",err)\n      }\n       \n\n    }\n    else{\n      alert(\"You need to install MetaMask.\")\n    }\n\n  }\n    \n\n  \n\n\n\n  \n\n   const cardInterpreter=(cardIndexList)=>{\n     const temp_cardList=[]\n     const values = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"];\n     const types = [\"C\", \"D\", \"H\", \"S\"];\n     for (let i=0;i<cardIndexList.length;i++){\n       const index=cardIndexList[i]\n       const value_index=index%52%13\n       const type_index=Math.floor(index%52/13)\n       const card={value:values[value_index],type:types[type_index]}\n       temp_cardList.push(card)\n     }\n     return temp_cardList\n\n   }\n \n   \n   \n  const dealingInterval=2000;\n\n  const nullPlayer=\"0x0000000000000000000000000000000000000000\";\n\n  const [account,setAccount]=useState(null)\n\n  const [dealer,setDealer]=useState(null)\n\n  //const [metamaskAccount,setmetamaskAccount]=useState(null)\n\n  const [dealerBal,setDealerBal]=useState(null)\n\n  const[player,setPlayer]=useState(null)\n\n  const[playerBal,setPlayerBal]=useState(null)\n\n  const[contractBal,setContractBal]=useState(null)\n\n  const[gameStart,setGameStart]=useState(null)\n\n  const[playerWin,setPlayerWin]=useState(null)\n\n  \n\n\n\n  \n  const initialCardCount=2\n  \n  const [isDealerStart,setisDealerStart]=useState(false)\n\n  const[playerList,setPlayerList]=useState([])\n  \n  //const[deck,]=useState(deckBuilder())\n\n  const[dealerCardList, setDealerCardList]=useState([])\n\n  const[turnIndex,setTurnIndex]=useState('')\n\n  const[isDealerTurn,setIsDealerTurn]=useState(false)\n\n  const [isPlayerAccount,setIsPlayerAccount]=useState(null)\n\n  const [isDealerAccount,setIsDealerAccount]=useState(null)\n\n  const[isPlayerJoin,setIsPlayerJoin]=useState(null)\n\n  const [isDealerReveal,setIsDealerReveal]=useState(false)\n\n\n  const [time, setTime] = useState(Date.now());\n\n  // useEffect(() => {\n  //   const interval = setInterval(() => setTime(Date.now()), 1000);\n  //   return () => {\n  //     clearInterval(interval);\n      \n  //   };\n    \n  // }, []);\n\n\n\n  const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms))\n  /*\n  Fetch players' data and then initiallize player list.\n  When isRoundStarted truns true, each player gets their initial cards by triggering dealing method\n  */\n  useEffect(() => {\n    async function listenMMAccount() {\n      window.ethereum.on(\"accountsChanged\", async function() {\n        // Time to reload your interface with accounts[0]!\n        let provider=window.ethereum;\n        const accounts= await provider.request({method:\"eth_requestAccounts\"})\n        setAccount(accounts[0])\n       \n        \n        \n        // accounts = await web3.eth.getAccounts();\n      });\n    }\n    listenMMAccount();\n  }, []);\n  \n  \n\n\nuseEffect(()=>{\n  connectWalletHandler()\n  setStatusHandler()\n  \n},[isDealerStart,player])\n\nuseEffect(()=>{\n  const currentUser= async()=>{\n    if(player!==null&&dealer!==null&&account!==null){\n   \n      setIsDealerAccount(dealer.toLowerCase()===account.toLowerCase());\n      setIsPlayerAccount(player.toLowerCase()===account.toLowerCase());\n    }\n\n  }\n  currentUser()\n},[account,player,dealer])\n\n\n\n\n\nconst joinGameHandler= async ()=>{\n  const result=await joinGame()\n  if(result){\n    await setStatusHandler()\n  \n  }\n\n}\n\nconst isDealerRevealHandler=()=>{\n  setIsDealerReveal(true)\n}\n\nconst startGameHandler=async()=>{\n  const result=await startGame()\n  if(result){\n    await setStatusHandler()\n    await setHandHandler()\n    //setisDealerStart(true)\n   \n    await wait(dealingInterval*4)\n    const gameStart_=await getGameStart()\n    const playerWin_=await getPlayerWin()\n    setGameStart(gameStart_)\n    setPlayerWin(playerWin_)\n    \n  }\n}\n\nconst setStatusHandler=async()=>{\n  const statusArr=await getStatus()\n  //setmetamaskAccount(statusArr.metamask_account)\n  setDealer(statusArr[0].dealer)\n  setDealerBal(statusArr[0].dealerBal)\n  setPlayer(statusArr[0].player)\n  setPlayerBal(statusArr[0].playerBal)\n  setContractBal(statusArr[0].contractBal)\n  \n  //setGameStart(statusArr[0].gameStart)\n  \n\n}\n\nconst setHandHandler=async()=>{\n   const handCard=await getHandCard()\n   const player_add=player\n  \n   const temp_playerList=playerList\n   const temp_dealerCardList=dealerCardList\n   const dealerHand_index=handCard.dealerHand\n   const playerHand_index=handCard.playerHand\n   if(dealerHand_index==null||playerHand_index==null){\n     return\n   }\n   const dealerHand=cardInterpreter(dealerHand_index)\n   const playerHand=cardInterpreter(playerHand_index)\n   const player_json={address:player_add,cardList:[],name:\"goodguy\",isMe:true,bet:10}\n   temp_playerList.push(player_json)\n   for (let i=0;i<2;i++){\n    temp_playerList[0].cardList.push(playerHand[i])\n    setPlayerList([...temp_playerList])\n    await wait(dealingInterval)\n    temp_dealerCardList.push(dealerHand[i])\n    setDealerCardList([...temp_dealerCardList])\n    await wait(dealingInterval)\n   }\n\n   //setisDealerStart(false)\n   setTurnIndex(0)\n   //console.log(dealerHand,dealerHand_index)\n\n   //console.log(dealerCardList,playerList)\n   \n}\n\n \n\n     \n    \n  \n\n\n\n/*\n  Start dealing cards.\n  */\n\n  const setisDealerStartHandler=()=>{\n    setisDealerStart(true)\n  }\n\n  const nextPlayerHandler=()=>{\n    if (turnIndex<playerList.length-1){\n    const nextIndex=turnIndex+1\n    setTurnIndex(nextIndex)\n    }\n    else{\n      setIsDealerTurn(true)\n    }\n  }\n\n  const hitHandler= async (index)=>{\n    \n    const result=await playerHitCard()\n    const temp_playerList=playerList\n    const temp_cardList=temp_playerList[index].cardList\n    const handCardNum=temp_cardList.length\n    const handCard=await getHandCard()\n    const playerHand_index=handCard.playerHand\n    const playerHand=cardInterpreter(playerHand_index)\n    temp_playerList[index].cardList.push(playerHand[handCardNum])\n   \n    setPlayerList([...temp_playerList])\n    const gameStart_=await getGameStart()\n    const playerWin_=await getPlayerWin()\n    setGameStart(gameStart_)\n    setPlayerWin(playerWin_)\n\n  }\n\n  const playerStandHandler= async ()=>{\n    const result=await playerStand()\n    //console.log(\"player stand: \",result)\n    const temp_dealerCardList=dealerCardList\n    const oldHandCardNum=temp_dealerCardList.length\n    const handCard=await getHandCard()\n    const dealerHandCard_index=handCard.dealerHand\n    const dealerHandCard=cardInterpreter(dealerHandCard_index)\n    //console.log(\"dealerhand: \",dealerHandCard)\n    const addedCardNum=dealerHandCard.length-oldHandCardNum\n    if(addedCardNum>0){\n      for (let i=0;i<addedCardNum;i++){\n        temp_dealerCardList.push(dealerHandCard[i+2])\n        console.log(temp_dealerCardList)\n        setDealerCardList([...temp_dealerCardList])\n        await wait(dealingInterval)\n\n      }\n    }\n    const gameStart_=await getGameStart()\n    const playerWin_=await getPlayerWin()\n\n    setGameStart(gameStart_)\n    setPlayerWin(playerWin_)\n\n    \n   \n  }\n\n  const withdrawHandler= async ()=>{\n    const result=await withdraw()\n    if(result){\n      console.log(\"successfully withdraw \")\n    }\n  }\n \n\n  const startGameListener= async ()=>{\n    const results=await startGameEventListener()\n    if(results){\n      const _gameStart=results.returnValues._gameStart\n      const _playerWin=results.returnValues._playerWin\n      const _dealerBalance=results.returnValues._dealerBalance\n      const _playerBalance=results.returnValues._playerBalance\n      setisDealerStart(_gameStart)\n      await wait(dealingInterval*4)\n      setPlayerWin(_playerWin)\n      setDealerBal(_dealerBalance)\n      setPlayerBal(_playerBalance)\n    \n      console.log(\"test gamestart listener\",results.returnValues._gameStart)\n    }\n    // else{\n    //   console.log(\"invalid res\")\n    // }\n    \n  }\n\n  startGameListener();\n\n  const joinGameListener= async ()=>{\n    const results=await joinGameEventListener()\n    if(results){\n      const _player=results.returnValues._player\n      setPlayer(_player)\n      setIsPlayerJoin(true)\n      console.log(\"test joingame listener\",results.returnValues._player)\n    }\n    // else{\n    //   console.log(\"invalid res\")\n    // }\n    \n  }\n\n  joinGameListener();\n  \n  const playerHitCardListener= async ()=>{\n    const results=await playerHitEventListener()\n    if(results){\n      const temp_playerList=playerList\n      const playerHand_index=results.returnValues._playerHand\n      const _playerWin=results.returnValues._playerWin\n      const _dealerBalance=results.returnValues._dealerBalance\n      const _playerBalance=results.returnValues._playerBalance\n      const playerHand=cardInterpreter(playerHand_index)\n      //const temp_cardList=temp_playerList[0].cardList\n      //const handCardNum=temp_cardList.length-1\n      temp_playerList[0].cardList=playerHand\n      \n      setPlayerList([...temp_playerList])\n      setIsDealerReveal(true)\n      setPlayerWin(_playerWin)\n      setDealerBal(_dealerBalance)\n      setPlayerBal(_playerBalance)\n\n      \n      //console.log(\"test handcard listener\",results.returnValues._playerHand,playerHand,temp_playerList)\n    }\n    // else{\n    //   console.log(\"invalid res\")\n    // }\n    \n  }\n  \n  playerHitCardListener();\n\n  const playerDealerCardListener= async ()=>{\n    const results=await playerStandEventListener()\n    if(results){\n      //const temp_dealerList=dealerCardList\n      const dealerHand_index=results.returnValues._dealerHand\n      const _playerWin=results.returnValues._playerWin\n      const _dealerBalance=results.returnValues._dealerBalance\n      const _playerBalance=results.returnValues._playerBalance\n      const dealerHand=cardInterpreter(dealerHand_index)\n      //const temp_cardList=temp_playerList[0].cardList\n      //const handCardNum=temp_cardList.length-1\n      //temp_dealerList=dealerHand\n      \n      setDealerCardList([...dealerHand])\n      setIsDealerReveal(true)\n      setPlayerWin(_playerWin)\n      setDealerBal(_dealerBalance)\n      setPlayerBal(_playerBalance)\n      //console.log(\"test standcard listener\",temp_dealerList,dealerHand)\n    }\n    // else{\n    //   console.log(\"invalid res\")\n    // }\n    \n  }\n  \n  playerDealerCardListener();\n\n\n  \n\n  return (\n    <>\n    <section\n    style={\n      {\n        position:\"absolute\",\n        marginLeft:\"1800px\",\n        paddingTop:\"30px\",\n        paddingRight:\"30px\"\n\n      }\n    }\n    >\n     <StartDialog\n    setisDealerStartHandler={setisDealerStartHandler}\n    initializeContract={initializeContract}\n    isPlayerJoin={isPlayerJoin}\n    isDealerStart={isDealerStart}\n    dealer={dealer}\n    player={player}\n    account={account}\n    joinGameHandler={joinGameHandler}\n    setStatusHandler={setStatusHandler}\n    startGameHandler={startGameHandler}\n    setHandHandler={setHandHandler}\n    startGameEventListener={startGameEventListener}\n    joinGameEventListener={joinGameEventListener}\n    \n    \n\n    />\n    <GameOverDialog\n    gameStart={gameStart}\n    withdrawHandler={withdrawHandler}\n    playerBal={playerBal}\n    playerWin={playerWin}\n    isPlayerAccount={isPlayerAccount}\n    isDealerAccount={isDealerAccount}\n    />\n  \n   {(dealerBal&&isPlayerAccount)&&(<Typography>{`Current balance: ${playerBal}`}</Typography>)}\n   {(dealerBal&&!isPlayerAccount&&isPlayerJoin!==null)&&(<Typography>{`Current balance: ${dealerBal}`}</Typography>)}\n   \n  \n   </section>\n    <div \n    className={styles.table}\n    style={{backgroundImage: `url(${backgroundImage})`}}\n    >\n   \n   \n    <Dealer\n    cardList={dealerCardList}\n    isDealerTurn={isDealerTurn}\n    isDealerAccount={isDealerAccount}\n    isPlayerAccount={isPlayerAccount}\n    isDealerReveal={isDealerReveal}\n    \n    />\n    \n    {playerList.map((player, index)=><Player\n      key={index}\n      playerIndex={index}\n      name={player.name}\n      isDealerAccount={isDealerAccount}\n      isPlayerAccount={isPlayerAccount}\n      bet={player.bet}\n      cardList={player.cardList}\n      whosTurn={turnIndex}\n      nextPlayerHandler={nextPlayerHandler}\n      hitHandler={hitHandler}\n      playerStandHandler={playerStandHandler}\n      isDealerRevealHandler={isDealerRevealHandler}\n      isDealerReveal={isDealerReveal}\n      />\n    )}\n    \n    </div>\n    </>\n  )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}