{"ast":null,"code":"import Web3 from \"web3\";\nimport BlackJackContractBuild from \"contracts/BlackJackV2.json\"; //let BlackJackContract;\n\nlet provider = window.ethereum;\nconst web3 = new Web3(provider);\nlet isInitial = false;\nlet contractAddress;\nlet BlackJackContract;\nlet accounts;\nlet currentP; //balance\n\nlet dealer;\nlet dealerBal;\nlet player;\nlet playerBal;\nlet contractBal; //const PROVIDER_URL='http://localhost:3000'\n\nexport const initializeContract = async () => {\n  if (!isInitial) {\n    const networkID = await web3.eth.net.getId();\n    contractAddress = BlackJackContractBuild.networks[networkID].address;\n    BlackJackContract = new web3.eth.Contract(BlackJackContractBuild.abi, contractAddress);\n    isInitial = true; //should be removed in production.\n  } //dealerBal= await BlackJackContract.methods.dealerBalance().call()\n  //const maxb=await BlackJackContract.methods.maxBet().call()\n  //const join=await BlackJackContract.methods.joinGame().send({from:accounts[0],value:10})\n  //data= await web3.eth.getCode(contractAddress)\n  //const deploy= await  BlackJackContract.deploy({data:data,arguments: [10, 1000]})\n  //console.log(dealerBal)\n  //console.log(maxb)\n  //const dealer= await BlackJackContract.methods.dealer().call()\n  //const balance=await web3.eth.getBalance(contractAddress)\n\n};\nexport const joinGame = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  return BlackJackContract.methods.joinGame().send({\n    from: accounts[0],\n    value: 10\n  });\n};\nexport const getDealer = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  return BlackJackContract.methods.dealer().call();\n};\nexport const getStatus = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  const statusArr = [];\n  accounts = await web3.eth.getAccounts();\n  player = await BlackJackContract.methods.player().call();\n  playerBal = await BlackJackContract.methods.playerBalance().call();\n  dealer = await BlackJackContract.methods.dealer().call();\n  dealerBal = await BlackJackContract.methods.dealerBalance().call();\n  contractBal = await web3.eth.getBalance(contractAddress);\n  console.log(`current player (Metamask...):${currentP}`);\n  console.log(`player :${player}`);\n  console.log(`player bal:${playerBal}`);\n  console.log(`current dealer:${dealer}`);\n  console.log(`dealer bal:${dealerBal}`);\n  console.log(`contract bal:${contractBal}`);\n  statusArr.push({\n    metamask_account: currentP,\n    player: player,\n    playerBal: playerBal,\n    dealer: dealer,\n    dealerBal: dealerBal,\n    contractBal: contractBal\n  });\n  return statusArr;\n};","map":{"version":3,"names":["Web3","BlackJackContractBuild","provider","window","ethereum","web3","isInitial","contractAddress","BlackJackContract","accounts","currentP","dealer","dealerBal","player","playerBal","contractBal","initializeContract","networkID","eth","net","getId","networks","address","Contract","abi","joinGame","methods","send","from","value","getDealer","call","getStatus","statusArr","getAccounts","playerBalance","dealerBalance","getBalance","console","log","push","metamask_account"],"sources":["/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/Web3Client.js"],"sourcesContent":["import Web3 from \"web3\"\nimport BlackJackContractBuild from \"contracts/BlackJackV2.json\"\n\n//let BlackJackContract;\nlet provider = window.ethereum \nconst web3 =new Web3(provider)\n\nlet isInitial=false;\n\nlet contractAddress;\nlet BlackJackContract;\nlet accounts;\nlet currentP\n//balance\nlet dealer;\nlet dealerBal;\nlet player;\nlet playerBal;\nlet contractBal;\n\n//const PROVIDER_URL='http://localhost:3000'\n\nexport const initializeContract= async ()=>{\n\nif(!isInitial){\n\nconst networkID= await web3.eth.net.getId()\ncontractAddress=BlackJackContractBuild.networks[networkID].address \nBlackJackContract= new web3.eth.Contract(BlackJackContractBuild.abi,contractAddress)\n\nisInitial=true\n\n//should be removed in production.\n\n\n}\n\n\n//dealerBal= await BlackJackContract.methods.dealerBalance().call()\n//const maxb=await BlackJackContract.methods.maxBet().call()\n//const join=await BlackJackContract.methods.joinGame().send({from:accounts[0],value:10})\n//data= await web3.eth.getCode(contractAddress)\n//const deploy= await  BlackJackContract.deploy({data:data,arguments: [10, 1000]})\n//console.log(dealerBal)\n//console.log(maxb)\n//const dealer= await BlackJackContract.methods.dealer().call()\n//const balance=await web3.eth.getBalance(contractAddress)\n\n} \n\n\n\nexport const joinGame= async ()=>{\n    if(!isInitial){\n        await initializeContract();}\n   \n        return BlackJackContract.methods.joinGame().send({from:accounts[0],value:10})\n    }\n    \n\n\n\nexport const getDealer= async ()=>{\n    if(!isInitial){\n        await initializeContract();\n    }\n        return BlackJackContract.methods.dealer().call()\n    }\n\nexport const getStatus=async()=>{\n    if (!isInitial) {\n        await initializeContract();\n    }\n    const statusArr = []\n    accounts = await web3.eth.getAccounts();\n    player = await BlackJackContract.methods.player().call()\n    playerBal = await BlackJackContract.methods.playerBalance().call()\n    dealer = await BlackJackContract.methods.dealer().call()\n    dealerBal = await BlackJackContract.methods.dealerBalance().call()\n    contractBal = await web3.eth.getBalance(contractAddress)\n\n    console.log(`current player (Metamask...):${currentP}`)\n    console.log(`player :${player}`)\n    console.log(`player bal:${playerBal}`)\n    console.log(`current dealer:${dealer}`)\n    console.log(`dealer bal:${dealerBal}`)\n    console.log(`contract bal:${contractBal}`)\n    statusArr.push({\n        metamask_account:currentP,\n        player:player,\n        playerBal:playerBal,\n        dealer:dealer,\n        dealerBal:dealerBal,\n        contractBal:contractBal})\n    return statusArr;\n\n    }\n\n\n\n    \n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}