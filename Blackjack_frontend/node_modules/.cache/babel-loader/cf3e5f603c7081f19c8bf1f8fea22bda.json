{"ast":null,"code":"import Web3 from \"web3\";\nimport BlackJackContractBuild from \"contracts/BlackJackV2.json\"; //let BlackJackContract;\n\nlet provider = window.ethereum;\nconst web3 = new Web3(provider);\nlet isInitial = false;\nlet contractAddress;\nlet BlackJackContract;\nlet accounts;\nlet currentP; //balance\n\nlet dealer;\nlet dealerBal;\nlet player;\nlet playerBal;\nlet contractBal; //cardlist\n\nlet playerHand;\nlet dealerHand; //game state\n\nlet gameStart;\nlet playerWin; //const PROVIDER_URL='http://localhost:3000'\n\nexport const initializeContract = async () => {\n  if (!isInitial) {\n    const networkID = await web3.eth.net.getId();\n    contractAddress = BlackJackContractBuild.networks[networkID].address;\n    BlackJackContract = new web3.eth.Contract(BlackJackContractBuild.abi, contractAddress);\n    isInitial = true; //should be removed in production.\n  } //dealerBal= await BlackJackContract.methods.dealerBalance().call()\n  //const maxb=await BlackJackContract.methods.maxBet().call()\n  //const join=await BlackJackContract.methods.joinGame().send({from:accounts[0],value:10})\n  //data= await web3.eth.getCode(contractAddress)\n  //const deploy= await  BlackJackContract.deploy({data:data,arguments: [10, 1000]})\n  //console.log(dealerBal)\n  //console.log(maxb)\n  //const dealer= await BlackJackContract.methods.dealer().call()\n  //const balance=await web3.eth.getBalance(contractAddress)\n\n};\nexport const joinGame = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  return BlackJackContract.methods.joinGame().send({\n    from: accounts[0],\n    value: 10\n  });\n};\nexport const startGame = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  return BlackJackContract.methods.startGame().send({\n    from: accounts[0]\n  });\n};\nexport const playerStand = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  return BlackJackContract.methods.playerStand().send({\n    from: accounts[0]\n  });\n};\nexport const playerHitCard = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  return BlackJackContract.methods.playerHitCard().send({\n    from: accounts[0]\n  });\n};\nexport const getDealer = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  return BlackJackContract.methods.dealer().call();\n};\nexport const getStatus = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  const statusArr = [];\n  accounts = await web3.eth.getAccounts();\n  currentP = accounts[0];\n  player = await BlackJackContract.methods.player().call();\n  playerBal = await BlackJackContract.methods.playerBalance().call();\n  dealer = await BlackJackContract.methods.dealer().call();\n  dealerBal = await BlackJackContract.methods.dealerBalance().call();\n  contractBal = await web3.eth.getBalance(contractAddress);\n  gameStart = await BlackJackContract.methods.gameStart().call();\n  playerWin = await BlackJackContract.methods.playerWin().call(); //dealerHand=await BlackJackContract.methods.getDealerHand().call()\n  //playerHand=await BlackJackContract.methods.getPlayerHand().call()\n  //console.log(`current player (Metamask...):${currentP}`)\n  //console.log(`player :${player}`)\n  // console.log(`player bal:${playerBal}`)\n  //console.log(`current dealer:${dealer}`)\n  // console.log(`dealer bal:${dealerBal}`)\n  // console.log(`contract bal:${contractBal}`)\n\n  statusArr.push({\n    metamask_account: currentP,\n    player: player,\n    playerBal: playerBal,\n    dealer: dealer,\n    dealerBal: dealerBal,\n    contractBal: contractBal,\n    gameStart: gameStart,\n    playerWin: playerWin\n  });\n  return statusArr;\n};\nexport const getHandCard = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  dealerHand = await BlackJackContract.methods.getDealerHand().call();\n  playerHand = await BlackJackContract.methods.getPlayerHand().call();\n  console.log(dealerHand, playerHand);\n  return {\n    dealerHand: dealerHand,\n    playerHand: playerHand\n  };\n};\nexport const getGameStart = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  gameStart = await BlackJackContract.methods.gameStart().call();\n  return gameStart;\n};\nexport const getPlayerWin = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  playerWin = await BlackJackContract.methods.playerWin().call();\n  return playerWin;\n};\nexport const startGameEventListener = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  const res = await BlackJackContract.getPastEvents(\"StartGame\", {});\n\n  if (res[0] !== \"undefined\") {\n    //console.log(\"what is this\",res[0])\n    return res[0];\n  } else {\n    return false;\n  }\n};\nexport const joinGameEventListener = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  BlackJackContract.events.joinGame({}).on('_player', event => console.log(event));\n\n  if (event[0] !== \"undefined\") {\n    //console.log(\"what is this\",res[0])\n    return res[0];\n  } else {\n    return false;\n  }\n};\nexport const playerHitEventListener = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  const res = await BlackJackContract.getPastEvents(\"PlayerHit\", {});\n\n  if (res[0] !== \"undefined\") {\n    //console.log(\"what is this\",res[0])\n    return res[0];\n  } else {\n    return false;\n  }\n};\nexport const playerStandEventListener = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  const res = await BlackJackContract.getPastEvents(\"PlayerStand\", {});\n\n  if (res[0] !== \"undefined\") {\n    //console.log(\"what is this\",res[0])\n    return res[0];\n  } else {\n    return false;\n  }\n};","map":{"version":3,"names":["Web3","BlackJackContractBuild","provider","window","ethereum","web3","isInitial","contractAddress","BlackJackContract","accounts","currentP","dealer","dealerBal","player","playerBal","contractBal","playerHand","dealerHand","gameStart","playerWin","initializeContract","networkID","eth","net","getId","networks","address","Contract","abi","joinGame","methods","send","from","value","startGame","playerStand","playerHitCard","getDealer","call","getStatus","statusArr","getAccounts","playerBalance","dealerBalance","getBalance","push","metamask_account","getHandCard","getDealerHand","getPlayerHand","console","log","getGameStart","getPlayerWin","startGameEventListener","res","getPastEvents","joinGameEventListener","events","on","event","playerHitEventListener","playerStandEventListener"],"sources":["/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/Web3Client.js"],"sourcesContent":["import Web3 from \"web3\"\nimport BlackJackContractBuild from \"contracts/BlackJackV2.json\"\n\n//let BlackJackContract;\nlet provider = window.ethereum \nconst web3 =new Web3(provider)\n\nlet isInitial=false;\n\nlet contractAddress;\nlet BlackJackContract;\nlet accounts;\nlet currentP\n//balance\nlet dealer;\nlet dealerBal;\nlet player;\nlet playerBal;\nlet contractBal;\n//cardlist\nlet playerHand\nlet dealerHand\n//game state\n\nlet gameStart;\nlet playerWin;\n\n//const PROVIDER_URL='http://localhost:3000'\n\nexport const initializeContract= async ()=>{\n\nif(!isInitial){\n\nconst networkID= await web3.eth.net.getId()\ncontractAddress=BlackJackContractBuild.networks[networkID].address \nBlackJackContract= new web3.eth.Contract(BlackJackContractBuild.abi,contractAddress)\n\nisInitial=true\n\n//should be removed in production.\n\n\n}\n\n\n//dealerBal= await BlackJackContract.methods.dealerBalance().call()\n//const maxb=await BlackJackContract.methods.maxBet().call()\n//const join=await BlackJackContract.methods.joinGame().send({from:accounts[0],value:10})\n//data= await web3.eth.getCode(contractAddress)\n//const deploy= await  BlackJackContract.deploy({data:data,arguments: [10, 1000]})\n//console.log(dealerBal)\n//console.log(maxb)\n//const dealer= await BlackJackContract.methods.dealer().call()\n//const balance=await web3.eth.getBalance(contractAddress)\n\n} \n\n\n\nexport const joinGame= async ()=>{\n    if(!isInitial){\n        await initializeContract();}\n   \n        return BlackJackContract.methods.joinGame().send({from:accounts[0],value:10})\n    }\n\nexport const startGame= async ()=>{\n        if(!isInitial){\n            await initializeContract();}\n       \n        return BlackJackContract.methods.startGame().send({from:accounts[0]})\n    } \n\nexport const playerStand= async ()=>{\n        if(!isInitial){\n            await initializeContract();}\n       \n        return BlackJackContract.methods.playerStand().send({from:accounts[0]})\n    }\n\n    export const playerHitCard= async ()=>{\n        if(!isInitial){\n            await initializeContract();}\n       \n        return BlackJackContract.methods.playerHitCard().send({from:accounts[0]})\n    }\n\nexport const getDealer= async ()=>{\n    if(!isInitial){\n        await initializeContract();\n    }\n        return BlackJackContract.methods.dealer().call()\n    }\n\nexport const getStatus=async()=>{\n    if (!isInitial) {\n        await initializeContract();\n    }\n    const statusArr = []\n    accounts = await web3.eth.getAccounts();\n    currentP=accounts[0]\n    player = await BlackJackContract.methods.player().call()\n    playerBal = await BlackJackContract.methods.playerBalance().call()\n    dealer = await BlackJackContract.methods.dealer().call()\n    dealerBal = await BlackJackContract.methods.dealerBalance().call()\n    contractBal = await web3.eth.getBalance(contractAddress)\n    gameStart=await BlackJackContract.methods.gameStart().call()\n    playerWin=await BlackJackContract.methods.playerWin().call()\n    //dealerHand=await BlackJackContract.methods.getDealerHand().call()\n    //playerHand=await BlackJackContract.methods.getPlayerHand().call()\n    \n\n    //console.log(`current player (Metamask...):${currentP}`)\n    //console.log(`player :${player}`)\n    // console.log(`player bal:${playerBal}`)\n    //console.log(`current dealer:${dealer}`)\n    // console.log(`dealer bal:${dealerBal}`)\n    // console.log(`contract bal:${contractBal}`)\n\n   \n    statusArr.push({\n        metamask_account:currentP,\n        player:player,\n        playerBal:playerBal,\n        dealer:dealer,\n        dealerBal:dealerBal,\n        contractBal:contractBal,\n        gameStart:gameStart,\n        playerWin:playerWin\n    })\n    return statusArr;\n\n    }\n\nexport const getHandCard=async()=>{\n    if (!isInitial) {\n        await initializeContract();\n    }\n    dealerHand=await BlackJackContract.methods.getDealerHand().call()\n    playerHand=await BlackJackContract.methods.getPlayerHand().call()\n    console.log(dealerHand,playerHand)\n    return ({dealerHand:dealerHand,playerHand:playerHand})\n\n\n}\nexport const getGameStart=async()=>{\n    if (!isInitial) {\n        await initializeContract();\n    }\n   gameStart=await BlackJackContract.methods.gameStart().call()\n    \n  \n    return gameStart\n\n\n}\n\nexport const getPlayerWin=async()=>{\n    if (!isInitial) {\n        await initializeContract();\n    }\n    playerWin=await BlackJackContract.methods.playerWin().call()\n    \n  \n    return playerWin\n\n\n}\n\nexport const startGameEventListener=async()=>{\n    if (!isInitial) {\n        await initializeContract();\n    }\n    const res=await BlackJackContract.getPastEvents(\"StartGame\",{})\n    if(res[0]!==\"undefined\"){\n        //console.log(\"what is this\",res[0])\n        return res[0]\n    }\n    else{\n        return false\n    }\n    \n}\n\nexport const joinGameEventListener=async()=>{\n    if (!isInitial) {\n        await initializeContract();\n    }\n    BlackJackContract.events.joinGame({}).on('_player',event =>console.log(event))\n    if(event[0]!==\"undefined\"){\n        //console.log(\"what is this\",res[0])\n        return res[0]\n    }\n    else{\n        return false\n    }\n    \n}\n\nexport const playerHitEventListener=async()=>{\n    if (!isInitial) {\n        await initializeContract();\n    }\n    const res=await BlackJackContract.getPastEvents(\"PlayerHit\",{})\n    if(res[0]!==\"undefined\"){\n        //console.log(\"what is this\",res[0])\n        return res[0]\n    }\n    else{\n        return false\n    }\n    \n}\n\nexport const playerStandEventListener=async()=>{\n    if (!isInitial) {\n        await initializeContract();\n    }\n    const res=await BlackJackContract.getPastEvents(\"PlayerStand\",{})\n    if(res[0]!==\"undefined\"){\n        //console.log(\"what is this\",res[0])\n        return res[0]\n    }\n    else{\n        return false\n    }\n    \n}\n\n\n\n\n    \n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}