{"ast":null,"code":"import Web3 from \"web3\";\nimport BlackJackContractBuild from \"contracts/BlackJackV2.json\"; //let BlackJackContract;\n\nlet provider = window.ethereum;\nconst web3 = new Web3(provider);\nlet isInitial = false;\nlet contractAddress;\nlet BlackJackContract;\nlet accounts;\nlet currentP; //balance\n\nlet dealer;\nlet dealerBal;\nlet player;\nlet playerBal;\nlet contractBal; //cardlist\n\nlet playerHand;\nlet dealerHand; //game state\n\nlet gameStart; //const PROVIDER_URL='http://localhost:3000'\n\nexport const initializeContract = async () => {\n  if (!isInitial) {\n    const networkID = await web3.eth.net.getId();\n    contractAddress = BlackJackContractBuild.networks[networkID].address;\n    BlackJackContract = new web3.eth.Contract(BlackJackContractBuild.abi, contractAddress);\n    isInitial = true; //should be removed in production.\n  } //dealerBal= await BlackJackContract.methods.dealerBalance().call()\n  //const maxb=await BlackJackContract.methods.maxBet().call()\n  //const join=await BlackJackContract.methods.joinGame().send({from:accounts[0],value:10})\n  //data= await web3.eth.getCode(contractAddress)\n  //const deploy= await  BlackJackContract.deploy({data:data,arguments: [10, 1000]})\n  //console.log(dealerBal)\n  //console.log(maxb)\n  //const dealer= await BlackJackContract.methods.dealer().call()\n  //const balance=await web3.eth.getBalance(contractAddress)\n\n};\nexport const joinGame = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  return BlackJackContract.methods.joinGame().send({\n    from: accounts[0],\n    value: 10\n  });\n};\nexport const startGame = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  return BlackJackContract.methods.startGame().send({\n    from: accounts[0]\n  });\n};\nexport const getDealer = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  return BlackJackContract.methods.dealer().call();\n};\nexport const getStatus = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  const statusArr = [];\n  accounts = await web3.eth.getAccounts();\n  currentP = accounts[0];\n  player = await BlackJackContract.methods.player().call();\n  playerBal = await BlackJackContract.methods.playerBalance().call();\n  dealer = await BlackJackContract.methods.dealer().call();\n  dealerBal = await BlackJackContract.methods.dealerBalance().call();\n  contractBal = await web3.eth.getBalance(contractAddress);\n  gameStart = await BlackJackContract.methods.gameStart().call(); //dealerHand=await BlackJackContract.methods.getDealerHand().call()\n  //playerHand=await BlackJackContract.methods.getPlayerHand().call()\n\n  console.log(`current player (Metamask...):${currentP}`);\n  console.log(`player :${player}`);\n  console.log(`player bal:${playerBal}`);\n  console.log(`current dealer:${dealer}`);\n  console.log(`dealer bal:${dealerBal}`);\n  console.log(`contract bal:${contractBal}`);\n  statusArr.push({\n    metamask_account: currentP,\n    player: player,\n    playerBal: playerBal,\n    dealer: dealer,\n    dealerBal: dealerBal,\n    contractBal: contractBal,\n    gameStart\n  });\n  return statusArr;\n};\nexport const getHandCard = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  dealerHand = await BlackJackContract.methods.getDealerHand().call();\n  playerHand = await BlackJackContract.methods.getPlayerHand().call(); //console.log(dealerHand,playerHand)\n\n  return {\n    dealerHand: dealerHand,\n    playerHand: playerHand\n  };\n};","map":{"version":3,"names":["Web3","BlackJackContractBuild","provider","window","ethereum","web3","isInitial","contractAddress","BlackJackContract","accounts","currentP","dealer","dealerBal","player","playerBal","contractBal","playerHand","dealerHand","gameStart","initializeContract","networkID","eth","net","getId","networks","address","Contract","abi","joinGame","methods","send","from","value","startGame","getDealer","call","getStatus","statusArr","getAccounts","playerBalance","dealerBalance","getBalance","console","log","push","metamask_account","getHandCard","getDealerHand","getPlayerHand"],"sources":["/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/Web3Client.js"],"sourcesContent":["import Web3 from \"web3\"\nimport BlackJackContractBuild from \"contracts/BlackJackV2.json\"\n\n//let BlackJackContract;\nlet provider = window.ethereum \nconst web3 =new Web3(provider)\n\nlet isInitial=false;\n\nlet contractAddress;\nlet BlackJackContract;\nlet accounts;\nlet currentP\n//balance\nlet dealer;\nlet dealerBal;\nlet player;\nlet playerBal;\nlet contractBal;\n//cardlist\nlet playerHand\nlet dealerHand\n//game state\n\nlet gameStart;\n\n//const PROVIDER_URL='http://localhost:3000'\n\nexport const initializeContract= async ()=>{\n\nif(!isInitial){\n\nconst networkID= await web3.eth.net.getId()\ncontractAddress=BlackJackContractBuild.networks[networkID].address \nBlackJackContract= new web3.eth.Contract(BlackJackContractBuild.abi,contractAddress)\n\nisInitial=true\n\n//should be removed in production.\n\n\n}\n\n\n//dealerBal= await BlackJackContract.methods.dealerBalance().call()\n//const maxb=await BlackJackContract.methods.maxBet().call()\n//const join=await BlackJackContract.methods.joinGame().send({from:accounts[0],value:10})\n//data= await web3.eth.getCode(contractAddress)\n//const deploy= await  BlackJackContract.deploy({data:data,arguments: [10, 1000]})\n//console.log(dealerBal)\n//console.log(maxb)\n//const dealer= await BlackJackContract.methods.dealer().call()\n//const balance=await web3.eth.getBalance(contractAddress)\n\n} \n\n\n\nexport const joinGame= async ()=>{\n    if(!isInitial){\n        await initializeContract();}\n   \n        return BlackJackContract.methods.joinGame().send({from:accounts[0],value:10})\n    }\n\nexport const startGame= async ()=>{\n        if(!isInitial){\n            await initializeContract();}\n       \n        return BlackJackContract.methods.startGame().send({from:accounts[0]})\n    } \n\n\n\nexport const getDealer= async ()=>{\n    if(!isInitial){\n        await initializeContract();\n    }\n        return BlackJackContract.methods.dealer().call()\n    }\n\nexport const getStatus=async()=>{\n    if (!isInitial) {\n        await initializeContract();\n    }\n    const statusArr = []\n    accounts = await web3.eth.getAccounts();\n    currentP=accounts[0]\n    player = await BlackJackContract.methods.player().call()\n    playerBal = await BlackJackContract.methods.playerBalance().call()\n    dealer = await BlackJackContract.methods.dealer().call()\n    dealerBal = await BlackJackContract.methods.dealerBalance().call()\n    contractBal = await web3.eth.getBalance(contractAddress)\n    gameStart=await BlackJackContract.methods.gameStart().call()\n    //dealerHand=await BlackJackContract.methods.getDealerHand().call()\n    //playerHand=await BlackJackContract.methods.getPlayerHand().call()\n    \n\n    console.log(`current player (Metamask...):${currentP}`)\n    console.log(`player :${player}`)\n    console.log(`player bal:${playerBal}`)\n    console.log(`current dealer:${dealer}`)\n    console.log(`dealer bal:${dealerBal}`)\n    console.log(`contract bal:${contractBal}`)\n\n   \n    statusArr.push({\n        metamask_account:currentP,\n        player:player,\n        playerBal:playerBal,\n        dealer:dealer,\n        dealerBal:dealerBal,\n        contractBal:contractBal,\n        gameStart\n    })\n    return statusArr;\n\n    }\n\nexport const getHandCard=async()=>{\n    if (!isInitial) {\n        await initializeContract();\n    }\n    dealerHand=await BlackJackContract.methods.getDealerHand().call()\n    playerHand=await BlackJackContract.methods.getPlayerHand().call()\n    //console.log(dealerHand,playerHand)\n    return ({dealerHand:dealerHand,playerHand:playerHand})\n\n\n}\n\n\n\n    \n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}