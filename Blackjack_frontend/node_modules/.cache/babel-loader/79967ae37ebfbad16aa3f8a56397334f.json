{"ast":null,"code":"import Web3 from \"web3\";\nimport BlackJackContractBuild from \"contracts/BlackJackV2.json\"; //let BlackJackContract;\n\nlet isInitial = false;\nlet BlackJackContract;\nlet accounts; //balance\n\nlet dealer;\nlet dealerBal;\nlet player;\nlet playerBal; //const PROVIDER_URL='http://localhost:3000'\n\nexport const initializeContract = async () => {\n  if (!isInitial) {} //dealerBal= await BlackJackContract.methods.dealerBalance().call()\n  //const maxb=await BlackJackContract.methods.maxBet().call()\n  //const join=await BlackJackContract.methods.joinGame().send({from:accounts[0],value:10})\n  //data= await web3.eth.getCode(contractAddress)\n  //const deploy= await  BlackJackContract.deploy({data:data,arguments: [10, 1000]})\n  //console.log(dealerBal)\n  //console.log(maxb)\n  //const dealer= await BlackJackContract.methods.dealer().call()\n  //const balance=await web3.eth.getBalance(contractAddress)\n\n};\nexport const joinGame = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  return BlackJackContract.methods.joinGame().send({\n    from: accounts[0],\n    value: 10\n  });\n};\nexport const getDealer = async () => {\n  if (!isInitial) {\n    await initializeContract();\n  }\n\n  return BlackJackContract.methods.dealer().call();\n};","map":{"version":3,"names":["Web3","BlackJackContractBuild","isInitial","BlackJackContract","accounts","dealer","dealerBal","player","playerBal","initializeContract","joinGame","methods","send","from","value","getDealer","call"],"sources":["/Users/tedwu/Desktop/未命名檔案夾 4/Blackjack/Blackjack_frontend/src/Web3Client.js"],"sourcesContent":["import Web3 from \"web3\"\nimport BlackJackContractBuild from \"contracts/BlackJackV2.json\"\n\n//let BlackJackContract;\nlet isInitial=false;\n\nlet BlackJackContract;\nlet accounts;\n//balance\nlet dealer;\nlet dealerBal;\nlet player;\nlet playerBal;\n\n//const PROVIDER_URL='http://localhost:3000'\n\nexport const initializeContract= async ()=>{\n\nif(!isInitial){\n\n}\n\n//dealerBal= await BlackJackContract.methods.dealerBalance().call()\n//const maxb=await BlackJackContract.methods.maxBet().call()\n//const join=await BlackJackContract.methods.joinGame().send({from:accounts[0],value:10})\n//data= await web3.eth.getCode(contractAddress)\n//const deploy= await  BlackJackContract.deploy({data:data,arguments: [10, 1000]})\n//console.log(dealerBal)\n//console.log(maxb)\n//const dealer= await BlackJackContract.methods.dealer().call()\n//const balance=await web3.eth.getBalance(contractAddress)\n\n} \n\n\n\nexport const joinGame= async ()=>{\n    if(!isInitial){\n        await initializeContract();}\n   \n        return BlackJackContract.methods.joinGame().send({from:accounts[0],value:10})\n    }\n    \n\n\n\nexport const getDealer= async ()=>{\n    if(!isInitial){\n        await initializeContract();\n    }\n        return BlackJackContract.methods.dealer().call()\n    }\n    \n\n\n\n\n\n"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,4BAAnC,C,CAEA;;AACA,IAAIC,SAAS,GAAC,KAAd;AAEA,IAAIC,iBAAJ;AACA,IAAIC,QAAJ,C,CACA;;AACA,IAAIC,MAAJ;AACA,IAAIC,SAAJ;AACA,IAAIC,MAAJ;AACA,IAAIC,SAAJ,C,CAEA;;AAEA,OAAO,MAAMC,kBAAkB,GAAE,YAAU;EAE3C,IAAG,CAACP,SAAJ,EAAc,CAEb,CAJ0C,CAM3C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AAEC,CAhBM;AAoBP,OAAO,MAAMQ,QAAQ,GAAE,YAAU;EAC7B,IAAG,CAACR,SAAJ,EAAc;IACV,MAAMO,kBAAkB,EAAxB;EAA4B;;EAE5B,OAAON,iBAAiB,CAACQ,OAAlB,CAA0BD,QAA1B,GAAqCE,IAArC,CAA0C;IAACC,IAAI,EAACT,QAAQ,CAAC,CAAD,CAAd;IAAkBU,KAAK,EAAC;EAAxB,CAA1C,CAAP;AACH,CALE;AAUP,OAAO,MAAMC,SAAS,GAAE,YAAU;EAC9B,IAAG,CAACb,SAAJ,EAAc;IACV,MAAMO,kBAAkB,EAAxB;EACH;;EACG,OAAON,iBAAiB,CAACQ,OAAlB,CAA0BN,MAA1B,GAAmCW,IAAnC,EAAP;AACH,CALE"},"metadata":{},"sourceType":"module"}