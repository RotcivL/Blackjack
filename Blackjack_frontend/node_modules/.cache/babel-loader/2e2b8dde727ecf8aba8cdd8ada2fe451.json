{"ast":null,"code":"var _jsxFileName = \"/Users/tedwu/Desktop/blackjack/blackjack/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport Dealer from './components/Dealer';\nimport Player from './components/Players';\nimport styles from \"../src/style/table.module.css\";\nimport backgroundImage from \"./table_background.jpeg\"; //import ReactDOM from 'react-dom';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const deck = [];\n  const playerList = [];\n  const dealingInterval = 2000;\n  const [isRoundStarted, setIsRoundStarted] = useState(true);\n  useEffect(() => {\n    const fetchpl = async () => {\n      try {\n        if (index === 0 && !isMe) {\n          const res = await import(`../cards/BACK.png`);\n          setImage(res.default);\n        } else {\n          const res = await import(`../cards/${value}-${type}.png`);\n          setImage(res.default);\n        }\n      } catch (err) {\n        setError(\"can't find such card\");\n      }\n    };\n\n    fetchImg();\n  }, [value, type, index, isDealer, isMe]);\n\n  const deckBuilder = () => {\n    const values = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"];\n    const types = [\"C\", \"D\", \"H\", \"S\"];\n\n    for (let i = 0; i < types.length; i++) {\n      for (let j = 0; j < values.length; j++) {\n        deck.push({\n          value: values[j],\n          type: types[i]\n        });\n      }\n    }\n\n    reshuffle(deck);\n  };\n\n  const reshuffle = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  const dealing = player => {\n    player.cardList.push(deck.pop());\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.table,\n      style: {\n        backgroundImage: `url(${backgroundImage})`\n      },\n      children: [/*#__PURE__*/_jsxDEV(Dealer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }, this), console.log(\"pre player render\", playerList), playerList.map((player, index) => /*#__PURE__*/_jsxDEV(Player, {\n        playerIndex: index,\n        name: player.name,\n        isMe: player.isMe,\n        bet: player.bet,\n        cardList: player.cardList\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 38\n      }, this)), console.log(\"after player render\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"RAFI04tmjKQ+88FkD2ZXgkqUh8g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Dealer","Player","styles","backgroundImage","App","deck","playerList","dealingInterval","isRoundStarted","setIsRoundStarted","fetchpl","index","isMe","res","setImage","default","value","type","err","setError","fetchImg","isDealer","deckBuilder","values","types","i","length","j","push","reshuffle","array","Math","floor","random","temp","dealing","player","cardList","pop","table","console","log","map","name","bet"],"sources":["/Users/tedwu/Desktop/blackjack/blackjack/src/App.js"],"sourcesContent":["\nimport { React, useState, useEffect } from 'react';\nimport Dealer from './components/Dealer';\nimport Player from './components/Players';\nimport styles from \"../src/style/table.module.css\"\nimport backgroundImage from \"./table_background.jpeg\"\n\n//import ReactDOM from 'react-dom';\n\n\n\nconst App=()=> {\n  const deck=[]\n  const playerList=[]\n  const dealingInterval=2000;\n  \n  const [isRoundStarted,setIsRoundStarted]=useState(true)\n\n  useEffect(()=>{\n    const fetchpl= async () => {\n        try{\n            if(index===0&&!isMe){\n                const res = await import(`../cards/BACK.png`)\n                setImage(res.default) \n            }\n            else{\n                const res= await import(`../cards/${value}-${type}.png`)\n                setImage(res.default) \n            }\n            \n        }catch(err){\n            setError(\"can't find such card\")\n        }\n\n    }\n    fetchImg()\n},[value,type,index,isDealer,isMe])\n \n   \n    \n    \n     \n    \n  \n  const deckBuilder=()=>{\n   \n   const values = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"];\n   const types = [\"C\", \"D\", \"H\", \"S\"];\n   \n   for (let i=0;i<types.length;i++ ){\n     for(let j=0;j<values.length;j++){\n       deck.push({value:values[j],\n                  type:types[i]})\n     }\n   }\n   reshuffle(deck)\n  }\n\n  const reshuffle=(array)=>{\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n  }\n  \n  }\n  const dealing=(player)=>{\n    player.cardList.push(deck.pop())\n  }\n\n  \n\n\n  \n\n  return (\n    <>\n    <div \n    className={styles.table}\n    style={{backgroundImage: `url(${backgroundImage})`}}\n    >\n    <Dealer/>\n    {console.log(\"pre player render\",playerList)}\n    {playerList.map((player, index)=><Player\n      key={index}\n      playerIndex={index}\n      name={player.name}\n      isMe={player.isMe}\n      bet={player.bet}\n      cardList={player.cardList}/>\n    )}\n    {console.log(\"after player render\")}\n    </div>\n   \n    </>\n  )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}